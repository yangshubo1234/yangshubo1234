<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【034】vue-cli4.0基础学习：创建组件</title>
      <link href="/2020/04/12/%E3%80%90034%E3%80%91vue-cli4-0%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/04/12/%E3%80%90034%E3%80%91vue-cli4-0%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="看一下-HelloWorld-vue"><a href="#看一下-HelloWorld-vue" class="headerlink" title="看一下 HelloWorld.vue"></a>看一下 HelloWorld.vue</h3><p>打开 components 文件夹中的 HelloWorld.vue 文件，先简单看一下，可以看到其实和 App.vue 是差不多的。  </p><ol><li>html 结构内容写在 <code>template</code>里面  </li><li>js 部分写在<code>script</code>里面，使用<code>export default{}</code>暴露出去  </li><li>css 部分写在<code>style</code>里面，不过有点区别，就是多了一个<code>scoped</code>  </li></ol><h3 id="scoped-的作用"><a href="#scoped-的作用" class="headerlink" title="scoped 的作用"></a>scoped 的作用</h3><p>scoped 的作用是下面样式的作用域就是当前这个组件，其他组件无法使用这个组件的样式。目前我们只需要知道是这么回事就可以了。</p><h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><p>我们在 components 文件夹中创建一个<code>v-header.vue</code>文件，也就是<code>v-header</code>组件。在网页中，头部一般有导航菜单，比如：首页，产品，新闻，招聘，关于等，那么我们先模仿<code>HelloWorld.vue</code>开始编写代码。  </p><p>全部代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;v-header&quot;&gt;</span><br><span class="line">        &lt;ul class&#x3D;&quot;menus&quot;&gt;</span><br><span class="line">            &lt;li </span><br><span class="line">                class&#x3D;&quot;menu&quot; </span><br><span class="line">                v-for&#x3D;&quot;item in menus&quot; </span><br><span class="line">                :key&#x3D;&quot;item.id&quot;</span><br><span class="line">            &gt;&#123;&#123; item.name &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#39;v-header&#39;,</span><br><span class="line">    desc: &#39;头部信息&#39;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            menus: [</span><br><span class="line">                &#123; id: 1, name: &#39;首页&#39; &#125;,</span><br><span class="line">                &#123; id: 2, name: &#39;产品&#39; &#125;,</span><br><span class="line">                &#123; id: 3, name: &#39;新闻&#39; &#125;,</span><br><span class="line">                &#123; id: 4, name: &#39;招聘&#39; &#125;,</span><br><span class="line">                &#123; id: 5, name: &#39;关于&#39; &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.v-header &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 70px;</span><br><span class="line">    background-color: #fff;</span><br><span class="line">    box-shadow: 3px 3px 3px #ddd;</span><br><span class="line">    color: #333;</span><br><span class="line">&#125;</span><br><span class="line">.menus &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">    padding: 0 20px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">.menu &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    padding: 0 20px;</span><br><span class="line">    height: 70px;</span><br><span class="line">    line-height: 80px;</span><br><span class="line">    transition: .3s;</span><br><span class="line">&#125;</span><br><span class="line">.menu:hover &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #0051ff;</span><br><span class="line">    background-color: #efefef;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h3><p>上一章说过，App.vue 是页面入口文件，所以我们需要修改这个文件，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">        &lt;v-header &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import vHeader from &#39;.&#x2F;components&#x2F;v-header.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#39;App&#39;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        vHeader</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">#app &#123;</span><br><span class="line">    font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">    color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>完成这一系列操作后，来看一下效果怎么样，如图：<br><img src="https://upload-images.jianshu.io/upload_images/8802304-8d040813b4e25754.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图.png"></p><p>如果大家的效果和效果图一样，那么恭喜大家，成功创建了一个组件。相信大家此刻一定有想继续做下去的冲动，先不要急，大家再好好看一下这个项目的其他文件，冷静一下，我们需要保持清醒。</p>]]></content>
      
      
      <categories>
          
          <category> vue-cli4.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-cli4.0基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【033】vue-cli4.0基础学习：创建项目</title>
      <link href="/2020/04/11/%E3%80%90033%E3%80%91vue-cli4-0%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2020/04/11/%E3%80%90033%E3%80%91vue-cli4-0%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ol><li>打开cmd命令窗口  </li><li>进入我们需要存放代码的目录  </li><li>输入命令：<code>vue create vue-cli</code>  </li><li>回车后，我们会看到<code>Please pick a preset</code>，这是让我们选择预设值，前期我们直接选择默认的就好  </li><li>再次回车，创建项目开始了  </li><li>过了一会，创建完成后，我们输入命令<code>cd vue-cli</code>进入这个项目  </li><li>进入后输入命令<code>npm run serve</code>回车开启项目  </li><li>好了，能看懂英文的同学已经看到了两个地址，我们在浏览器中打开这两个地址就可以了</li></ol><h3 id="项目中的文件介绍"><a href="#项目中的文件介绍" class="headerlink" title="项目中的文件介绍"></a>项目中的文件介绍</h3><p>我们在开发工具中打开<code>vue-cli</code>项目，看看里面都有什么文件，分别有什么作用。</p><p>项目目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">|-- node_modules&#x2F;&#x2F; 依赖包，里面有各种项目所需要的包</span><br><span class="line">|-- public&#x2F;&#x2F; 避开webpack</span><br><span class="line">|   |-- favicon.ico&#x2F;&#x2F; 小图标</span><br><span class="line">|   |-- index.html&#x2F;&#x2F; 模板文件，作用是生成项目的入口文件</span><br><span class="line">|-- src&#x2F;&#x2F; 源码目录，我们写的代码基本会放在这里</span><br><span class="line">|   |-- assets&#x2F;&#x2F; 公共文件存放处</span><br><span class="line">|   |-- components&#x2F;&#x2F; vue公共组件</span><br><span class="line">|   |-- App.vue&#x2F;&#x2F; 页面入口文件</span><br><span class="line">|   |-- main.js&#x2F;&#x2F; 程序入口文件，加载各种公共组件</span><br><span class="line">|-- .gitignore&#x2F;&#x2F; 上传github的配置，前期先不管</span><br><span class="line">|-- babel.config.js&#x2F;&#x2F; babel配置，前期先不管</span><br><span class="line">|-- package-lock.json&#x2F;&#x2F; 在 &#96;npm install&#96;时候生成一份文件，用以记录当前状态下实际安装的各个npm package的具体来源和版本号</span><br><span class="line">|-- package.json&#x2F;&#x2F; 包信息，项目所需的包信息都在里面，指向&#96;npm install&#96;下载依赖包</span><br><span class="line">|-- README.md&#x2F;&#x2F; 项目说明，暂时不管</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h3 id="看一下-App-vue"><a href="#看一下-App-vue" class="headerlink" title="看一下 App.vue"></a>看一下 App.vue</h3><p>我们先打开看一下<code>App.vue</code>文件，可以发现里面的代码既熟悉又陌生。比如 html 中的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">&lt;HelloWorld msg&#x3D;&quot;Welcome to Your Vue.js App&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p><code>template</code>标签以前讲过，这里不再讲解。  </p><p>我们再看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;HelloWorld msg&#x3D;&quot;Welcome to Your Vue.js App&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>是不是很熟悉？这个就是组件的使用，只是<code>HelloWorld</code>组件被单独放在了<code>components</code>文件夹里面，需要使用<code>import</code>引入，而以前我们都是在同一个文件中使用<code>Vue.component()</code>写的，这里有点小区别。  </p><p>还有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">name: &#39;App&#39;,</span><br><span class="line">components: &#123;</span><br><span class="line">HelloWorld</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以前我们是直接使用<code>new Vue()</code>，这里使用的是<code>export default {}</code>，相当于提供一个接口给外界，让其他文件通过<code>import</code>来引入使用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当我们创建完项目再打开这些文件来看时，对于初次接触<code>vue-cli</code>的小伙伴来说一定会感觉很陌生，甚至会有很多疑问，这些都是正常的。我们可以打开<code>vue-cli</code>文档看看，慢慢了解，千万不要急躁，也可以在里面先随便尝试下，不要怕出错，如果错了实在不知道怎么改了，就把这个项目删掉，然后重新再创建项目，继续试，实在不行了，大家可以私信我，把疑问的地方提出来，我给大家讲解。</p><p>注意：<code>import/export</code>是ES6引入的新规范，因为浏览器引擎兼容问题，需要在 node中 用 babel 将 ES6语法 编译成 ES5语法，初学者可能有点不太明白，这里大家先这样用就可以了，用多了就明白了。</p>]]></content>
      
      
      <categories>
          
          <category> vue-cli4.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-cli4.0基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【032】vue-cli4.0基础学习：前期准备</title>
      <link href="/2020/04/11/%E3%80%90032%E3%80%91vue-cli4-0%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
      <url>/2020/04/11/%E3%80%90032%E3%80%91vue-cli4-0%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h3 id="学习准备"><a href="#学习准备" class="headerlink" title="学习准备"></a>学习准备</h3><ol><li>HTML的基础知识，比如基本元素的使用和结构代码的编写  </li><li>CSS的基础知识，比如常见样式的编写和页面的布局  </li><li>Javascript的基础知识，比如常见函数的使用  </li><li>已经看完了前面所发布的文章<code>vue基础学习</code>，<code>vue全局API学习</code>，<code>vue选项</code>  </li></ol><h3 id="关于-vue-cli"><a href="#关于-vue-cli" class="headerlink" title="关于 vue-cli"></a>关于 vue-cli</h3><p>vue-cli 是一个基于 Vue.js 进行快速开发的完整系统，简单理解就是快速构建单页应用的脚手架。如果小伙伴们对 vue 还是不太熟悉，建议再看一遍以前的文章加深一下理解。因为在学 vue-cli 时，我们可能会遇到一些以前从来没有见过的东西，比如<code>webpack</code>，<code>babel</code>，<code>vuex</code>，<code>vue-router</code>等，在刚开始的学习中，我会尽量减少接触这几个，到中期时再慢慢讲解。这个过程可能会有点痛苦，让人产生一些放弃的想法，但是一定要坚持住，坚持完了，那么小伙伴们就可以试着开始实战了。</p><h3 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 vue-cli</h3><blockquote><p>虽然目前还有一些公司用的是<code>vue-cli 2.0</code>，不过既然已经有了最新的，那么我们就直接安装最新的吧。</p></blockquote><ol><li>打开cmd命令窗口，输入命令：<code>npm install -g @vue/cli</code>  </li><li>等到执行完后，我们可以使用<code>vue --version</code>或<code>vue -V</code>来检验是否安装成功。<br>如果有显示类似<code>@vue/cli 4.3.1</code>的内容，说明我们已经安装成功了，下面就可以直接创建个项目开搞了。</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>有些小伙伴喜欢用<code>yarn</code>安装依赖，其实只要能达到目的，用哪一个都是可以的，选择自己喜欢的就好。要是实在太慢了，大家也可以用<code>cnpm</code>试试，方法挺多，问题不大。关于<code>yarn</code>的用法，有兴趣的小伙伴可以直接在网上搜索，其实跟<code>npm</code>的用法差不多，区别不大。</p>]]></content>
      
      
      <categories>
          
          <category> vue-cli4.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-cli4.0基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【031】Vue选项：keep-alive的生命周期钩子</title>
      <link href="/2020/04/09/%E3%80%90031%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9Akeep-alive%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/"/>
      <url>/2020/04/09/%E3%80%90031%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9Akeep-alive%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h3 id="关于-keep-alive-组件"><a href="#关于-keep-alive-组件" class="headerlink" title="关于 keep-alive 组件"></a>关于 keep-alive 组件</h3><blockquote><p>在开发时，经常会出现页签之类的组件，当在这些组件之间切换的时候，你有时会想保持这些组件的状态，以避免反复重渲染导致的性能问题。为了解决这个问题，我们可以用一个<code>&lt;keep-alive&gt;</code>元素将其动态组件包裹起来，从而在它们第一次被创建的时候缓存下来。</p><p><code>&lt;keep-alive&gt;</code>包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。<code>&lt;keep-alive&gt;</code>是一个抽象组件：它自身不会渲染一个<code>DOM</code>元素，也不会出现在组件的父组件链中。</p></blockquote><h3 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h3><blockquote><p>钩子在服务器端渲染期间不被调用。</p><p>当组件在<code>&lt;keep-alive&gt;</code>内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。</p></blockquote><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>include</td><td>字符串或正则表达式。只有名称匹配的组件会被缓存。</td></tr><tr><td>exclude</td><td>字符串或正则表达式。任何名称匹配的组件都不会被缓存。</td></tr><tr><td>max</td><td>数字。最多可以缓存多少组件实例。</td></tr></tbody></table><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive :include&#x3D;&quot;include&quot; :exclude&#x3D;&quot;exclude&quot; :max&#x3D;&quot;max&quot;&gt;</span><br><span class="line">&lt;component :is&#x3D;&quot;currentTab&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure><p>属性的使用方法后期遇到了再讲解，在本章中主要看下生命周期钩子。</p><h3 id="生命周期钩子函数的用法"><a href="#生命周期钩子函数的用法" class="headerlink" title="生命周期钩子函数的用法"></a>生命周期钩子函数的用法</h3><table><thead><tr><th>周期</th><th>说明</th></tr></thead><tbody><tr><td>activated</td><td>被 keep-alive 缓存的组件激活时调用</td></tr><tr><td>deactivated</td><td>被 keep-alive 缓存的组件停用时调用。</td></tr></tbody></table><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.btn &#123;</span><br><span class="line">padding: 5px 10px;</span><br><span class="line">border-top-left-radius: 3px;</span><br><span class="line">border-top-right-radius: 3px;</span><br><span class="line">border: 1px solid #ddd;</span><br><span class="line">cursor: pointer;</span><br><span class="line">background-color: #fff;</span><br><span class="line">margin-bottom: -1px;</span><br><span class="line">margin-right: -1px;</span><br><span class="line">&#125;</span><br><span class="line">.currentTab,</span><br><span class="line">.btn:hover &#123;</span><br><span class="line">background-color: #ddd;</span><br><span class="line">&#125;</span><br><span class="line">.btn:focus&#123;</span><br><span class="line">outline: 0;</span><br><span class="line">&#125;</span><br><span class="line">.component &#123;</span><br><span class="line">padding: 10px 15px;</span><br><span class="line">border: 1px solid #ddd;</span><br><span class="line">width: 300px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;btns&quot;&gt;</span><br><span class="line">&lt;button </span><br><span class="line">class&#x3D;&quot;btn&quot;</span><br><span class="line">:class&#x3D;&quot;currentTab &#x3D;&#x3D;&#x3D; item ? &#39;currentTab&#39; : &#39;&#39;&quot;</span><br><span class="line">type&#x3D;&quot;button&quot;</span><br><span class="line">v-for&#x3D;&quot;(item, index) in tabs&quot;</span><br><span class="line">:key&#x3D;&quot;index&quot;</span><br><span class="line">@click&#x3D;&quot;currentTab &#x3D; item&quot;</span><br><span class="line">&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">&lt;component :is&#x3D;&quot;currentTab&quot;&gt;&lt;&#x2F;component&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">Vue.component(&#39;tab01&#39;, &#123;</span><br><span class="line">template: &#96;&lt;div class&#x3D;&quot;component&quot;&gt;tab01&lt;div&gt;&#96;,</span><br><span class="line">activated() &#123;</span><br><span class="line">alert(&#39;activated &#x3D; tab01&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">deactivated() &#123;</span><br><span class="line">alert(&#39;deactivated &#x3D; tab01&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(&#39;tab02&#39;, &#123;</span><br><span class="line">template: &#96;&lt;div class&#x3D;&quot;component&quot;&gt;tab02&lt;div&gt;&#96;,</span><br><span class="line">activated() &#123;</span><br><span class="line">alert(&#39;activated &#x3D; tab01&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">deactivated() &#123;</span><br><span class="line">alert(&#39;deactivated &#x3D; tab01&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">tabs: [&#39;tab01&#39;, &#39;tab02&#39;],</span><br><span class="line">currentTab: &#39;tab01&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>运行上面的代码，过程就不再一一讲解了，都是一样的套路。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【030】Vue选项：vue的生命周期钩子</title>
      <link href="/2020/04/09/%E3%80%90030%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9Avue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/"/>
      <url>/2020/04/09/%E3%80%90030%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9Avue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是生命周期"><a href="#什么是生命周期" class="headerlink" title="什么是生命周期"></a>什么是生命周期</h3><blockquote><p>vue 的每个组件就像一个生命体，有出生，有成长，有死亡等阶段，它们会在不同的阶段做不同的事，这个过程就是生命周期。</p></blockquote><p>vue组件生命周期有以下几个：</p><table><thead><tr><th>周期</th><th>说明</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td>mounted</td><td>挂载后</td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;v-demo v-if&#x3D;&quot;!isDestroy&quot;&gt;&lt;&#x2F;v-demo&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;isDestroy &#x3D; true&quot;&gt;销毁组件&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 先来定义一个组件</span><br><span class="line">Vue.component(&#39;v-demo&#39;, &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;更新前&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;msg&#x3D;&#39;更新后&#39;&quot;&gt;更新&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;,</span><br><span class="line">&#x2F;&#x2F; 以下是该组件的生命周期</span><br><span class="line">beforeCreate() &#123;</span><br><span class="line">alert(&#39;创建前：beforeCreate&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">alert(&#39;创建后：created&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeMount() &#123;</span><br><span class="line">alert(&#39;挂载前：beforeMount&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">alert(&#39;挂载后：mounted&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeUpdate() &#123;</span><br><span class="line">alert(&#39;更新前：beforeUpdate&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">updated() &#123;</span><br><span class="line">alert(&#39;更新后：updated&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">alert(&#39;销毁前：beforeDestroy&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">destroyed() &#123;</span><br><span class="line">alert(&#39;销毁后：destroyed&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">isDestroy: false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ol><li>在浏览器中运行上面的代码，页面一次弹出<code>创建前：beforeCreate</code>-&gt;<code>创建后：created</code>-&gt;<code>挂载前：beforeMount</code>-&gt;<code>挂载后：mounted</code>，这个就是vue组件其中一部分生命周期，那么怎么触发剩下的生命周期呢？  </li><li>我们接着点击<code>更新</code>按钮，可以看到弹出<code>更新前：beforeUpdate</code>-&gt;<code>更新后：updated</code>，这个就像一个人遇到了某些事，然后作出某些反应一样。  </li><li>最后来触发下销毁的生命周期，怎么触发呢？这个就好比人，生命走到尽头就什么都没有了，也就是说，我们只要把这个组件去掉就可以了，点击<code>销毁组件</code>按钮后依次弹出<code>销毁前：beforeDestroy</code>-&gt;<code>销毁后：destroyed</code>。  </li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过示例代码，是不是对生命周期有了比较直观的了解？其实在日常中，不论是开发还是面试，生命周期都是避不开的一个坎，大家一定要多敲几次熟悉一下。如果想具体了解，可以到官网<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">选项 / 生命周期钩子</a>查看，里面已经有详细的解释了，这里就不再多说。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【029】Vue选项：computed 和 methods 的区别</title>
      <link href="/2020/04/08/%E3%80%90029%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9Acomputed%E5%92%8Cmethods%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/04/08/%E3%80%90029%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9Acomputed%E5%92%8Cmethods%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;methodsMsg &#x3D; &#123;&#123; methodsMsg() &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;computedMsg &#x3D; &#123;&#123; computedMsg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;我是信息&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">computedMsg() &#123;</span><br><span class="line">return this.msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">methodsMsg() &#123;</span><br><span class="line">return this.msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>通过上面的代码可以发现，computed 定义的方法是以属性访问的形式调用的，methods 定义的方法是以函数调用的形式调用的。</p><h3 id="computed-的缓存功能"><a href="#computed-的缓存功能" class="headerlink" title="computed 的缓存功能"></a>computed 的缓存功能</h3><p>上一章有提到过，computed 是支持缓存的，这要怎么证明它是支持缓存的呢？先来看一下下面的示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;computedMsg &#x3D; &#123;&#123; computedMsg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;computedMsg &#x3D; &#123;&#123; computedMsg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;computedMsg &#x3D; &#123;&#123; computedMsg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;methodsMsg &#x3D; &#123;&#123; methodsMsg() &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;methodsMsg &#x3D; &#123;&#123; methodsMsg() &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;methodsMsg &#x3D; &#123;&#123; methodsMsg() &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;我是信息&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">computedMsg() &#123;</span><br><span class="line">alert(&#39;computedMsg&#39;);</span><br><span class="line">return this.msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">methodsMsg() &#123;</span><br><span class="line">alert(&#39;methodsMsg&#39;);</span><br><span class="line">return this.msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中运行上面的代码，我们可以看到：<code>computedMsg</code>出现了一次弹出框，而<code>methodsMsg</code>出现了三次弹出框。</p><blockquote><p>发现：<br>1，computed 定义的 <code>computedMsg</code> 方法只会做一次计算，返回一个值；<br>2， methods 定义的 <code>methodsMsg</code> 方法只要是遇见<code>methodsMsg()</code>都会运行。  </p><p>结论：<br>computed 更适合复杂逻辑，避免重复调用造成的浪费，从而提高性能，优化用户体验。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1，computed 是属性调用，而 methods 是函数调用；<br>2，computed 带有缓存功能，而 methods 没有；<br>3，computed 依赖于data中的数据，只有在它的相关依赖数据发生改变时才会重新求值，而 methods 需要我们调用方法时才会执行；<br>4，computed 也可以防止文本插值中逻辑过重而导致不易维护的情况出现。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【028】Vue选项：watch 和 computed 的区别</title>
      <link href="/2020/04/08/%E3%80%90028%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9Awatch%E5%92%8Ccomputed%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/04/08/%E3%80%90028%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9Awatch%E5%92%8Ccomputed%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="关于-watch"><a href="#关于-watch" class="headerlink" title="关于 watch"></a>关于 watch</h3><p>1，当数据改变时，直接触发对应操作；<br>2，可以监听的数据有三部分，即<code>props</code>，<code>data</code>，<code>computed</code>；<br>3，所触发的对应操作函数中包含两个参数，第一个参数是新值<code>newValue</code>，第二个参数是旧值<code>oldValue</code>；<br>4，不支持缓存，但支持异步，在数据变化时执行异步或开销较大的操作时使用；<br>5，一对多，即一个数据改变时，可以通过触发对应操作改变多个其他的数据。  </p><h3 id="关于-computed"><a href="#关于-computed" class="headerlink" title="关于 computed"></a>关于 computed</h3><p>1，computed 依赖于 data 中的数据，只有在它的相关依赖数据发生改变时才会重新求值；<br>2，用于处理复杂的逻辑运算；<br>3，支持缓存，但不支持异步；<br>4，多对一或一对一，即一个属性是由其他属性计算而来的，这个属性可能是依赖其他一个或多个属性。  </p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;watchMsg &#x3D; &#123;&#123; watchMsg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;computedMsg &#x3D; &#123;&#123; computedMsg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;msg &#x3D; &#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div&gt;watchAsync &#x3D; &#123;&#123; watchAsync &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;msg &#x3D; 1&quot;&gt;msg &#x3D; 1&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;0&#39;,</span><br><span class="line">watchMsg: &#39;&#39;,</span><br><span class="line">watchAsync: &#39;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">computedMsg() &#123;</span><br><span class="line">return this.msg;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">msg(value) &#123;</span><br><span class="line">this.watchMsg &#x3D; value;</span><br><span class="line">&#x2F;&#x2F; 模拟一个异步</span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">this.watchAsync &#x3D; value;</span><br><span class="line">&#125;, 1000)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中运行上面的代码，当页面加载时，<code>computed</code>会先执行一次，显示结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">watchMsg &#x3D;</span><br><span class="line">computedMsg &#x3D; 0</span><br><span class="line">msg &#x3D; 0</span><br><span class="line">watchAsync &#x3D;</span><br></pre></td></tr></table></figure><p>为什么<code>watch</code>没有触发监听呢？因为在Vue实例时，<code>msg</code>的值一直都为<code>0</code>，不存在数据变化，自然无法触发<code>watch</code>，<code>watchMsg</code>也不会发生变化。当点击按钮时，显示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">watchMsg &#x3D; 1</span><br><span class="line">computedMsg &#x3D; 1</span><br><span class="line">msg &#x3D; 1</span><br><span class="line">watchAsync &#x3D; 1</span><br></pre></td></tr></table></figure><p>可以看到，<code>watchAsync = 1</code>是过了一秒后才显示出来的，说明<code>watch</code>支持异步。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【027】Vue选项：数据中的 watch</title>
      <link href="/2020/04/07/%E3%80%90027%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84watch/"/>
      <url>/2020/04/07/%E3%80%90027%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84watch/</url>
      
        <content type="html"><![CDATA[<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><blockquote><p>观察 Vue 实例上的一个表达式或者一个函数计算结果的变化。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">name(value) &#123;</span><br><span class="line">this.newName &#x3D; value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;大家好，我新名字是&#123;&#123; newName &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input v-model&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name: &#39;小明&#39;,</span><br><span class="line">newName: &#39;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">name(value) &#123;</span><br><span class="line">this.newName &#x3D; value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在上面的例子中，watch 监听的都是一些简单的数据，如果我们需要监听一些比较复杂的数据，比如对象呢？这个时候我们就需要用到深度监听<code>deep</code>了。</p><h3 id="深度监听"><a href="#深度监听" class="headerlink" title="深度监听"></a>深度监听</h3><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">childrens: &#123;</span><br><span class="line">handler(value) &#123;</span><br><span class="line">this.name &#x3D; value.name;</span><br><span class="line">&#125;,</span><br><span class="line">deep: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;大家好，我是&#123;&#123; childrens.name &#125;&#125;，今年&#123;&#123; childrens.age &#125;&#125;岁了。&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input v-model&#x3D;&quot;childrens.name&quot; &#x2F;&gt;</span><br><span class="line">&lt;div&gt;我是监听器，我监听到了 &#123;&#123; oldName &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">childrens: &#123;</span><br><span class="line">name: &#39;小明&#39;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;,</span><br><span class="line">name: &#39;&#39;,</span><br><span class="line">oldName: &#39;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">childrens: &#123;</span><br><span class="line">handler(value) &#123;</span><br><span class="line">this.name &#x3D; value.name;</span><br><span class="line">&#125;,</span><br><span class="line">deep: true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在日常开发中基本是离不开<code>watch</code>的，所以大家要多敲几遍代码熟悉一下。如果想了解更多<code>watch</code>的用法，大家可以到官网去查看一下，这里只是列举了经常用的的方法。既然<code>watch</code>可以监听，那么它和我们上次提到的<code>computed</code>有什么区别呢？下一章我们来看一下它们之间的区别。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【026】Vue选项：数据中的 methods</title>
      <link href="/2020/04/07/%E3%80%90026%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84methods/"/>
      <url>/2020/04/07/%E3%80%90026%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84methods/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">add() &#123;</span><br><span class="line">this.count +&#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;add&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">count: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add() &#123;</span><br><span class="line">this.count +&#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>通过上面的示例代码，我们可以发现：</p><ol><li>methods属性给可以给 Vue 定义<code>add</code>方法</li><li>在方法中使用<code>this.</code>可以直接访问data中的数据<code>count</code></li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>很多小伙伴在定义方法时喜欢使用<code>es6</code>的语法，比如箭头函数<code>() =&gt; {}</code>，那么在给 Vue 定义方法时，是否也可以使用箭头函数呢？看一下下面的示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;add&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">count: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add: () &#x3D;&gt; &#123;</span><br><span class="line">this.count +&#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中运行上面的示例代码，我们可以发现，当我们点击<code>累加</code>按钮时，数据并没有出现出现累加的结果。这是为什么呢？<br>了解过箭头函数的小伙伴应该知道，<code>() =&gt; {}</code>有一个用法就是改变<code>this</code>的指向，那么在 Vue 中，箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例。因此我们可以得出结论：<code>不应该使用箭头函数来定义 method 函数</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【025】Vue选项：数据中的computed</title>
      <link href="/2020/04/06/%E3%80%90025%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84computed/"/>
      <url>/2020/04/06/%E3%80%90025%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84computed/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常开发中，如果说有哪些选项是经常使用的，<code>computed</code>绝对是其中一个。因为我们有时需要对原始数据进行更改后再输出。比如我在文本框输入了一大串数据，然后我希望这一大串数据可以颠倒显示出来，你也许会在模版内直接使用表达式，比如这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&#123;&#123; msg.split(&#39;&#39;).reverse().join(&#39;&#39;) &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>这样写可以达到我们的要求，看起来也没什么问题。但是，如果我输入的这一大串数据需要在多个地方显示出来，总不能每个地方都写这么一个表达式吧？这样会很累的。Vue 也考虑了在模板中放入太多的逻辑会让模板过重且难以维护，所以<code>computed</code>出现了。</p><h3 id="computed-的使用"><a href="#computed-的使用" class="headerlink" title="computed 的使用"></a>computed 的使用</h3><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; reversedMsg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input v-model&#x3D;&quot;msg&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;hello&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">&#x2F;&#x2F; 颠倒</span><br><span class="line">reversedMsg() &#123;</span><br><span class="line">return this.msg.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>通过上面的示例代码，可以看到颠倒数据的表达式已经被统一在了<code>computed</code>中，这样写会给人更清晰的感觉，在后期维护中也会更方便。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【024】Vue选项：数据中的 propsData</title>
      <link href="/2020/04/06/%E3%80%90024%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84propsData/"/>
      <url>/2020/04/06/%E3%80%90024%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84propsData/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>小编在日常开发中，基本是不使用<code>propsData</code>的，所以在这里我们了解一下即可。当然，可能对于一些开发人员会经常用到，比如在测试时，可以直接模拟一些数据，从而方便测试。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>创建实例时传递 props。主要作用是方便测试。只用于 new 创建的实例中。</p></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;v-demo&gt;&lt;&#x2F;v-demo&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var Comp &#x3D; Vue.extend(&#123;</span><br><span class="line">props: [&#39;msg&#39;],</span><br><span class="line">template: &#96;&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;&#96;</span><br><span class="line">&#125;)</span><br><span class="line">new Comp(&#123;</span><br><span class="line">propsData: &#123;</span><br><span class="line">msg: &#39;hello&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).$mount(&#39;#app&#39;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行上面的代码，可以看到页面显示内容为<code>hello</code>，运行正常。</p><p>通过上面的代码，我们用三步解决了全局扩展的传值：  </p><ol><li>先在时全局扩展中加入<code>props: [&#39;msg&#39;]</code>接受<code>msg</code>的值；</li><li>然后在 new 示例中使用<code>propsData: { msg: &#39;hello&#39;}</code>给<code>msg</code>赋值；</li><li>最后通过<code>$mount</code>挂载传递<code>msg</code>的值到全局扩展中。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【023】Vue选项：数据中的 props</title>
      <link href="/2020/04/05/%E3%80%90023%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84props/"/>
      <url>/2020/04/05/%E3%80%90023%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84props/</url>
      
        <content type="html"><![CDATA[<p>在前面的一些章节中已经简单地使用过<code>props</code>，知道它是用来接受来自父组件的数据的。这一章来深入了解一下 props 的更多使用方法。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>props 可以是数组或对象，用于接收来自父组件的数据。props 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值。</p></blockquote><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>数据类型</td></tr><tr><td>default</td><td>默认值</td></tr><tr><td>required</td><td>是否必填</td></tr><tr><td>validator</td><td>自定义验证函数</td></tr></tbody></table><blockquote><p>数据类型可以为<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Array</code>、<code>Object</code>、<code>Date</code>、<code>Function</code>、<code>Symbol</code>、任何自定义构造函数、或上述内容组成的数组。如果prop不是给定的类型将会抛出警告。</p></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;!-- 注意，引入vue.js时需要使用开发环境版本，这样才能在看到报错提示效果 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;number&quot; v-model&#x3D;&quot;msg&quot; &#x2F;&gt;</span><br><span class="line">&lt;v-demo :age&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;v-demo&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">Vue.component(&#39;v-demo&#39;, &#123;</span><br><span class="line">props: &#123;</span><br><span class="line">age: &#123;</span><br><span class="line">type: [Number, String],</span><br><span class="line">default: 18,</span><br><span class="line">required: true,</span><br><span class="line">validator: function (value) &#123;</span><br><span class="line">return value &gt;&#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: &#96;&lt;div&gt;我今年 &#123;&#123; age &#125;&#125; 岁。&lt;&#x2F;div&gt;&#96;</span><br><span class="line">&#125;)</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: 1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>validator只是验证，这个函数返回值是布尔值，用这个布尔值来判断是否通过，它的返回值是验证作用，而不是修改props，如果想要修改原始数据，那么可以采用其他的方式，比如computed等方式修改，后面会讲到。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【022】Vue选项：数据中的 data</title>
      <link href="/2020/04/05/%E3%80%90022%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84data/"/>
      <url>/2020/04/05/%E3%80%90022%E3%80%91Vue%E9%80%89%E9%A1%B9%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%B8%AD%E7%9A%84data/</url>
      
        <content type="html"><![CDATA[<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>Vue 实例的数据对象。Vue 将会递归将 data 的属性转换为 getter/setter，从而让 data 的属性能够响应数据变化。对象必须是纯粹的对象 (含有零个或多个的 key/value 对)：浏览器 API 创建的原生对象，原型上的属性会被忽略。大概来说，data 应该只能是数据 - 不推荐观察拥有状态行为的对象。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">title: &#39;Hello World&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">title: &#39;Hello World&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>是不是很熟悉？其实在开发过程中，data的使用是不可或缺的，我们以前写的那些例子，基本都是有用到的。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>当一个组件被定义，data 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 data 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 data 函数，每次创建一个新实例后，我们能够调用 data 函数，从而返回初始数据的一个全新副本数据对象。</p><blockquote><p>如果有需要深究的小伙伴，可以返回<a href="[https://www.jianshu.com/p/f2eb1845bb61](https://www.jianshu.com/p/f2eb1845bb61)">vue基础学习：组件基础（一）</a>中的<code>data 必须是一个函数</code>进行了解，里面有两个详细的示例代码进行解释，在这里就不再详解。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue选项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【021】Vue全局API学习：组件之间的通信</title>
      <link href="/2020/04/04/%E3%80%90021%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
      <url>/2020/04/04/%E3%80%90021%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>其实在 Vue2.0基础学习 中，我们已经简单地了解过组件的使用了。在这一章中，我们主要来了解一下组件之间的通信。</p><h3 id="父组件向子组件传递数据"><a href="#父组件向子组件传递数据" class="headerlink" title="父组件向子组件传递数据"></a>父组件向子组件传递数据</h3><blockquote><p>使用 props 向子组件传递数据</p></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;c-b&gt;&lt;&#x2F;c-b&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 子组件</span><br><span class="line">var cA &#x3D; &#123;</span><br><span class="line">props: [&#39;msg&#39;],</span><br><span class="line">template: &#96;&lt;div&gt;</span><br><span class="line">&lt;p&gt;子组件收到：&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&#96;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 父组件</span><br><span class="line">var cB &#x3D; &#123;</span><br><span class="line">template: &#96;&lt;div&gt;</span><br><span class="line">&lt;p&gt;父组件说：我准备给子组件通信&lt;&#x2F;p&gt;</span><br><span class="line">&lt;c-a msg&#x3D;&quot;我是父组件，我来给子组件通个信&quot;&gt;&lt;&#x2F;c-a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&#96;,</span><br><span class="line">components: &#123;</span><br><span class="line">cA: cA</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">components: &#123;</span><br><span class="line">cB: cB</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>看上面的代码会感觉有点绕，因为子组件和父组件都是写在同一个文件里的，如果理解为分成三个文件，子组件一个，父组件一个，主文件一个，那么你就会清晰一些。</p><h3 id="子组件向父组件传递数据"><a href="#子组件向父组件传递数据" class="headerlink" title="子组件向父组件传递数据"></a>子组件向父组件传递数据</h3><blockquote><p>子组件主要通过事件传递数据给父组件，也就是在基础学习中的<code>$emit</code>。</p></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;c-b&gt;&lt;&#x2F;c-b&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 子组件</span><br><span class="line">var cA &#x3D; &#123;</span><br><span class="line">template: &#96;&lt;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;$emit(&#39;say&#39;, &#39;爸爸好&#39;)&quot;&gt;我是子组件，点我，我有话对父组件说&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&#96;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 父组件</span><br><span class="line">var cB &#x3D; &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: &#96;&lt;div&gt;</span><br><span class="line">&lt;p&gt;我是父组件，子组件刚刚对我说：&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;c-a @say&#x3D;&quot;msg &#x3D; $event&quot;&gt;&lt;&#x2F;c-a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&#96;,</span><br><span class="line">components: &#123;</span><br><span class="line">cA: cA</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">components: &#123;</span><br><span class="line">cB: cB</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="兄弟组件传递数据"><a href="#兄弟组件传递数据" class="headerlink" title="兄弟组件传递数据"></a>兄弟组件传递数据</h3><blockquote><p>兄弟组件直接的传递数据方式有很多，比如：</p><ol><li>子传父，父再传子，太麻烦了，不考虑  </li><li>vuex，状态管理  </li><li>eventBus，可以理解为 <code>$emit</code> 和 <code>$on</code> 的结合使用</li></ol></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;c-a&gt;&lt;&#x2F;c-a&gt;</span><br><span class="line">&lt;c-b&gt;&lt;&#x2F;c-b&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var eventBus &#x3D; new Vue();</span><br><span class="line">&#x2F;&#x2F; 兄弟组件A</span><br><span class="line">var cA &#x3D; &#123;</span><br><span class="line">template: &#96;&lt;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;say&quot;&gt;我是兄弟组件A，点我，我有话对兄弟组件B说&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&#96;,</span><br><span class="line">methods: &#123;</span><br><span class="line">say() &#123;</span><br><span class="line">eventBus.$emit(&#39;say&#39;, &#39;你好，兄弟组件B&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#x2F;&#x2F; 兄弟组件B</span><br><span class="line">var cB &#x3D; &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: &#96;&lt;div&gt;</span><br><span class="line">&lt;p&gt;我是兄弟组件B，我是兄弟组件A刚刚对我说：&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;&#96;,</span><br><span class="line">created() &#123;</span><br><span class="line">eventBus.$on(&#39;say&#39;, (val) &#x3D;&gt; &#123; </span><br><span class="line">this.msg &#x3D; val; </span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">components: &#123;</span><br><span class="line">cA: cA,</span><br><span class="line">cB: cB</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在这里只介绍<code>eventBus</code>，因为后期会讲到vuex，而且现在估计有一部分人不知道vuex是什么。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面的示例代码看起来可能会有些乱，其实只要多敲几遍就会感觉没有想象中那么难，在后期我们使用<code>vue-cli</code>时，这些就会显得更简单。而且组件之间的传递数据在日常开发中，使用是超级多的，所以一定要多练习，很重要，很重要，很重要，重要的事情说三遍。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue全局API学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【020】Vue全局API学习：template的三种写法</title>
      <link href="/2020/04/04/%E3%80%90020%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9Atemplate%E7%9A%84%E4%B8%89%E7%A7%8D%E5%86%99%E6%B3%95/"/>
      <url>/2020/04/04/%E3%80%90020%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9Atemplate%E7%9A%84%E4%B8%89%E7%A7%8D%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前面的很多章节中，在我们自定义组件时经常会出现<code>template</code>标签，那么它到底是什么呢？</p><blockquote><p>template是html5的一个新元素，主要用于保存客户端中的内容，表现为浏览器解析该内容但不渲染出来，可以将一个模板视为正在被存储以供随后在文档中使用的一个内容片段。  </p><p><code>template</code>标签在 Vue 中的作用：存放dom结构的</p></blockquote><h3 id="写法一：写在-template-标签里"><a href="#写法一：写在-template-标签里" class="headerlink" title="写法一：写在 template 标签里"></a>写法一：写在 template 标签里</h3><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">&lt;div&gt;写在template标签里&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;template id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">&lt;div&gt;写在template标签里&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">template: &#39;#demo&#39;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="写在script标签里"><a href="#写在script标签里" class="headerlink" title="写在script标签里"></a>写在script标签里</h3><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;template&quot; id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">&lt;div&gt;写在script标签里&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;template&quot; id&#x3D;&quot;demo&quot;&gt;</span><br><span class="line">&lt;div&gt;写在script标签里&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">template: &#39;#demo&#39;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="直接写在选项里"><a href="#直接写在选项里" class="headerlink" title="直接写在选项里"></a>直接写在选项里</h3><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template: &#39;&lt;div&gt;直接写在选项里&lt;&#x2F;div&gt;&#39;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">template: &#39;&lt;div&gt;直接写在选项里&lt;&#x2F;div&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上三种写法都可以达到我们需要的效果，在日常开发中，使用哪一种并没有特定的要求，哪种合适就选择哪一种。如果我们开发项目使用了<code>vue-cli</code>脚手架，那么就更简单了，直接新建一个<code>xxx.vue</code>文件，按照规则编写即可。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue全局API学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【019】Vue全局API学习：Vue.compile</title>
      <link href="/2020/04/03/%E3%80%90019%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-compile/"/>
      <url>/2020/04/03/%E3%80%90019%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-compile/</url>
      
        <content type="html"><![CDATA[<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><blockquote><p>将一个模板字符串编译成 render 函数。只在完整版时可用。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.compile(&#39;&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;&#39;);</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var res &#x3D; Vue.compile(&#39;&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;&#39;);</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data: &#123;</span><br><span class="line">msg: &#39;hello&#39;</span><br><span class="line">&#125;,</span><br><span class="line">render: res.render</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中运行代码可以看到页面正常显示<code>hello</code>，在这一过程中，到底经历了什么呢？</p><h3 id="compile-的步骤"><a href="#compile-的步骤" class="headerlink" title="compile 的步骤"></a>compile 的步骤</h3><blockquote><p>compile 的内容非常多，大致分为三块主要内容，就是<code>parse</code>，<code>optimize</code>，<code>generate</code><br>另外，compile 的作用是解析模板，生成渲染模板的 render</p></blockquote><ol><li>步骤一：parse <ul><li>接收 template 原始模板，按照模板的节点 和数据 生成对应的 ast 。</li></ul></li><li>步骤二：optimize  <ul><li>遍历递归每一个ast节点，标记静态的节点（没有绑定任何动态数据），这样就知道那部分不会变化，于是在页面需要更新时，减少去比对这部分DOM，从而达到性能优化的目的。</li></ul></li><li>步骤三：generate  <ul><li>把前两步生成完善的 ast 组装成 render 字符串。</li></ul></li></ol><p>因为目前是基础学习，所以这里只作为了解，后期如果有机会再深入。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue全局API学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【018】Vue全局API学习：Vue.filter 和 Vue.mixin</title>
      <link href="/2020/04/02/%E3%80%90018%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-filter%E5%92%8CVue-mixin/"/>
      <url>/2020/04/02/%E3%80%90018%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-filter%E5%92%8CVue-mixin/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为过滤器和混入这两个在Vue基础学习中<code>（局部使用）</code>已经有过接触，所以在这里就把这两个<code>（全局使用）</code>再讲解一下，加深一下大家的印象。</p><h3 id="Vue-filter-的全局使用"><a href="#Vue-filter-的全局使用" class="headerlink" title="Vue.filter 的全局使用"></a>Vue.filter 的全局使用</h3><blockquote><p>注册或获取全局过滤器。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 注册</span><br><span class="line">Vue.filter(&#39;toUpperCase&#39;, function(val) &#123;</span><br><span class="line">return val.toUpperCase();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;filters 过滤器&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; msg | toUpperCase &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">Vue.filter(&#39;toUpperCase&#39;, function(val) &#123;</span><br><span class="line">return val.toUpperCase();</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;abcdefg&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue-mixin-的全局使用"><a href="#Vue-mixin-的全局使用" class="headerlink" title="Vue.mixin 的全局使用"></a>Vue.mixin 的全局使用</h3><blockquote><p>全局注册一个混入，影响注册之后所有创建的每个 Vue 实例。插件作者可以使用混入，向组件注入自定义的行为。不推荐在应用代码中使用。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name: &#39;张三&#39;,</span><br><span class="line">sex: &#39;男&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;mixin 混入&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;姓名：&#123;&#123; name &#125;&#125;，性别：&#123;&#123; sex &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name: &#39;张三&#39;,</span><br><span class="line">sex: &#39;男&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue全局API学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【017】Vue全局API学习：Vue.directive</title>
      <link href="/2020/04/02/%E3%80%90017%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-directive/"/>
      <url>/2020/04/02/%E3%80%90017%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-directive/</url>
      
        <content type="html"><![CDATA[<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><blockquote><p>注册或获取全局指令。</p></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;input v-focus &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 注册一个全局自定义指令 &#96;v-focus&#96;</span><br><span class="line">Vue.directive(&#39;focus&#39;, &#123;</span><br><span class="line">&#x2F;&#x2F; 当被绑定的元素插入到 DOM 中时……</span><br><span class="line">inserted(el) &#123;</span><br><span class="line">&#x2F;&#x2F; 聚焦元素</span><br><span class="line">el.focus();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">var vm &#x3D; new Vue(&#123; el: &#39;#app&#39; &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中运行上面的代码，可以看到文本框在页面加载时自动聚焦了。</p><h3 id="自定义指令的生命周期（钩子函数）"><a href="#自定义指令的生命周期（钩子函数）" class="headerlink" title="自定义指令的生命周期（钩子函数）"></a>自定义指令的生命周期（钩子函数）</h3><p>钩子函数说明：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>bind</td><td>只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置</td></tr><tr><td>inserted</td><td>被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)</td></tr><tr><td>update</td><td>所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新</td></tr><tr><td>componentUpdated</td><td>指令所在组件的 VNode 及其子 VNode 全部更新后调用</td></tr><tr><td>unbind</td><td>只调用一次，指令与元素解绑时调用</td></tr></tbody></table><p>看钩子函数说明后，再来看个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-demo&#x3D;&quot;&#39;demo&#39;&quot;&gt;当前数字：&#123;&#123; num &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;num++&quot;&gt;累加&lt;&#x2F;button&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;destroy&quot;&gt;解绑&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">Vue.directive(&#39;demo&#39;, &#123;</span><br><span class="line">bind(el, bingind)&#123;</span><br><span class="line">alert(&#39;bind：&#39; + bingind.value);</span><br><span class="line">&#125;,</span><br><span class="line">inserted()&#123;</span><br><span class="line">alert(&#39;inserted&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">update()&#123;</span><br><span class="line">alert(&#39;update&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">componentUpdated()&#123;</span><br><span class="line">alert(&#39;componentUpdated&#39;);</span><br><span class="line">&#125;,</span><br><span class="line">unbind()&#123;</span><br><span class="line">alert(&#39;unbind&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">num: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">&#x2F;&#x2F; 解绑</span><br><span class="line">destroy() &#123;</span><br><span class="line">this.$destroy();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>当浏览器加载完成时，页面会先弹出<code>bind：demo</code>，<code>demo</code>为<code>v-demo=&quot;&#39;demo&#39;&quot;</code>中的值，关闭弹出框后，继续弹出<code>inserted</code>，关闭后，首次的钩子函数执行完成。<br>接着我们点击<code>累加</code>按钮，点击完成后，页面弹出<code>update</code>，关闭后继续弹出<code>componentUpdated</code>，到此为止，点击按钮后触发的钩子函数执行完成。<br>最后，我们点击<code>解绑</code>按钮，页面弹出<code>unbind</code>，紧接着试着点击<code>累加</code>按钮，发现没有任何效果，说明解绑成功。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue全局API学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【017】Vue全局API学习：Vue.set</title>
      <link href="/2020/04/02/%E3%80%90016%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-set/"/>
      <url>/2020/04/02/%E3%80%90016%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-set/</url>
      
        <content type="html"><![CDATA[<h3 id="先来看一个例子"><a href="#先来看一个例子" class="headerlink" title="先来看一个例子"></a>先来看一个例子</h3><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;性别：&#123;&#123; obj.sex || &#39;未知&#39; &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">obj: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">vm.obj.sex &#x3D; &#39;男&#39;;</span><br><span class="line">&#125;, 2000)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>让我们先来在浏览器上运行一下上面的代码，页面显示内容<code>性别：未知</code>，过了两秒后，新增一个性别<code>sex</code>的属性，并赋值<code>男</code>，但是我们发现页面显示的内容并没有如我们所预期的那样改变。</p><blockquote><p>结论：Vue 无法探测普通的新增属性。</p></blockquote><h3 id="Vue-set-用法"><a href="#Vue-set-用法" class="headerlink" title="Vue.set 用法"></a>Vue.set 用法</h3><blockquote><p>向响应式对象中添加一个属性，并确保这个新属性同样是响应式的，且触发视图更新。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对应参数：  </span><br><span class="line">&#x2F;&#x2F; vm.obj&#123;Object | Array&#125;target</span><br><span class="line">&#x2F;&#x2F; &#39;sex&#39;&#123;string | number&#125;propertyName&#x2F;index</span><br><span class="line">&#x2F;&#x2F; &#39;男&#39;&#123;any&#125;value</span><br><span class="line">Vue.set(vm.obj, &#39;sex&#39;, &#39;男&#39;);</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;性别：&#123;&#123; obj.sex || &#39;未知&#39; &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">obj: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">Vue.set(vm.obj, &#39;sex&#39;, &#39;男&#39;);</span><br><span class="line">&#125;, 2000)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中运行上面的代码，刚开始页面显示内容为<code>性别：未知</code>，过了两秒后，页面显示内容为<code>性别：男</code>，内容改变，目的达到。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue全局API学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【015】Vue全局API学习：Vue.nextTick</title>
      <link href="/2020/04/01/%E3%80%90015%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-nextTick/"/>
      <url>/2020/04/01/%E3%80%90015%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-nextTick/</url>
      
        <content type="html"><![CDATA[<h3 id="用法一"><a href="#用法一" class="headerlink" title="用法一"></a>用法一</h3><blockquote><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">alert(&#39;数据发生了改变&#39;);</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;改变前&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">vm.msg &#x3D; &#39;改变后&#39;;</span><br><span class="line">Vue.nextTick(() &#x3D;&gt; &#123;</span><br><span class="line">alert(&#39;数据发生了改变&#39;);</span><br><span class="line">&#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行一下上面的代码，可以看到，页面先显示了<code>改变前</code>，然后弹出一个框，内容为<code>数据发生了改变</code>，这时先不要关掉弹出框，我们看一下页面的内容还是为<code>改变前</code>，当我们把弹出框关掉后，页面的内容显示为<code>改变后</code>。  </p><blockquote><p>从例子中我们可以得出：<br>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。</p></blockquote><h3 id="用法二"><a href="#用法二" class="headerlink" title="用法二"></a>用法二</h3><blockquote><p>从第一节我们可以知道 Vue 是异步执行 DOM 更新的，既然这样，那么<code>Vue.nextTick</code>是不是就可以作为一个<code>Promise</code>使用呢？下面写一段代码试一下。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.nextTick()</span><br><span class="line">.then(() &#x3D;&gt; &#123;</span><br><span class="line">alert(&#39;数据发生了改变&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;改变前&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">vm.msg &#x3D; &#39;改变后&#39;;</span><br><span class="line">Vue.nextTick()</span><br><span class="line">.then(() &#x3D;&gt; &#123;</span><br><span class="line">alert(&#39;数据发生了改变&#39;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行上面的代码，发现和第一节的代码运行结果是一样的。</p><h3 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h3><ol><li>在视图更新之后，基于新的视图进行操作。比如在在<code>created</code>和<code>mounted</code>阶段。<code>created</code>和<code>mounted</code>都是生命周期，这个会在后面提到，现在可以先记一下，加点印象。</li><li>点击获取元素宽度时会用到，因为我们只要在DOM渲染完成后才能准确获取宽高。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue全局API学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【014】Vue全局API学习：Vue.extend</title>
      <link href="/2020/04/01/%E3%80%90014%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-extend/"/>
      <url>/2020/04/01/%E3%80%90014%E3%80%91Vue%E5%85%A8%E5%B1%80API%E5%AD%A6%E4%B9%A0%EF%BC%9AVue-extend/</url>
      
        <content type="html"><![CDATA[<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><blockquote><ol><li>使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。</li><li>data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数</li></ol></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var Profile &#x3D; Vue.extend(&#123;</span><br><span class="line">template: &#96;&lt;p&gt;My name is &#123;&#123; name &#125;&#125;, I am &#123;&#123; age &#125;&#125;&lt;p&gt;&#96;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name: &#39;zhangsan&#39;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">new Profile().$mount(&#39;#app&#39;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器运行代码，可以看到页面显示内容为：<code>My name is zhangsan, I am 18.</code></p><h3 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h3><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;profile&gt;&lt;&#x2F;profile&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var Profile &#x3D; Vue.extend(&#123;</span><br><span class="line">template: &#96;&lt;p&gt;My name is &#123;&#123; name &#125;&#125;, I am &#123;&#123; age &#125;&#125;.&lt;p&gt;&#96;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name: &#39;zhangsan&#39;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 看这里</span><br><span class="line">Vue.component(&#39;profile&#39;, Profile)</span><br><span class="line">new Vue(&#123; el: &#39;#app&#39; &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器运行代码，可以看到页面显示内容同样为：<code>My name is zhangsan, I am 18.</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上面第一节和第二节的示例代码，我们发现<code>Vue.extend</code>和<code>Vue.component</code>好像有一点关系。现在我们将Vue基础学习中的基础组件代码拿一部分出来比较一下。</p><p>先看一下<code>vue.component</code>的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 自定义组件</span><br><span class="line">Vue.component(&#39;v-btn&#39;, &#123;</span><br><span class="line">template: &#96;&lt;p&gt;My name is &#123;&#123; name &#125;&#125;, I am &#123;&#123; age &#125;&#125;&lt;p&gt;&#96;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name: &#39;zhangsan&#39;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 实例化</span><br><span class="line">new Vue(&#123; el: &#39;#app&#39; &#125;);</span><br></pre></td></tr></table></figure><p>在看一下<code>vue.extend</code>的用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var Profile &#x3D; Vue.extend(&#123;</span><br><span class="line">template: &#96;&lt;p&gt;My name is &#123;&#123; name &#125;&#125;, I am &#123;&#123; age &#125;&#125;&lt;p&gt;&#96;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name: &#39;zhangsan&#39;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">new Profile().$mount(&#39;#app&#39;);</span><br></pre></td></tr></table></figure><blockquote><p>比较后我们发现，<code>vue.extend</code>不需要实例化，只需要通过<code>$mount</code>挂载到自定义的元素上即可。</p></blockquote><p>再结合第二节的示例代码，我们可以得出：  </p><ul><li><code>vue.extend</code>创建的是一个组件构造器，不是直接挂载在vue的示例对象。简单理解就是<code>vue.extend</code>构造了一个和vue组件内部有一样结构的对象，并且还需要通过<code>Vue.components</code>注册才可以使用的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue全局API学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【013】Vue基础学习：混入和过滤器</title>
      <link href="/2020/03/31/%E3%80%90013%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%B7%B7%E5%85%A5%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/03/31/%E3%80%90013%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E6%B7%B7%E5%85%A5%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="mixin混入"><a href="#mixin混入" class="headerlink" title="mixin混入"></a><code>mixin</code>混入</h3><blockquote><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;mixin 混入&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;姓名：&#123;&#123; name &#125;&#125;，性别：&#123;&#123; sex &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var mixin &#x3D; &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name: &#39;张三&#39;,</span><br><span class="line">sex: &#39;男&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">mixins: [mixin]</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</li><li>数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先。</li></ul><h3 id="filters过滤器"><a href="#filters过滤器" class="headerlink" title="filters过滤器"></a><code>filters</code>过滤器</h3><blockquote><p>Vue.js 允许你自定义过滤器，可被用于一些常见的文本格式化。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在双花括号中 --&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; msg | toUpperCase &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在 &#96;v-bind&#96; 中 --&gt;</span><br><span class="line">&lt;div v-bind:msg&#x3D;&quot;msg | toUpperCase&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;filters 过滤器&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; msg | toUpperCase &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">filters: &#123;</span><br><span class="line">toUpperCase(val) &#123;</span><br><span class="line">return val.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;abcdefg&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在开发过程中，<code>filters</code>过滤器是比较常用的，比如订单状态，时间格式转换等都会使用一下。而<code>mixin</code>混入用的相对会少一些，虽然<code>mixin</code>混入不需要传递状态，但是也比较容易被滥用。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【012】Vue基础学习：将原生事件绑定到组件</title>
      <link href="/2020/03/31/%E3%80%90012%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6/"/>
      <url>/2020/03/31/%E3%80%90012%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="native修饰符"><a href="#native修饰符" class="headerlink" title=".native修饰符"></a><code>.native</code>修饰符</h3><blockquote><p>我们有时候需要对封装好的组件做一些原生事件的操作，比如点击<code>click</code>事件，这个时候可以使用<code>.native</code>修饰符完成。</p></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;v-demo @click.native&#x3D;&quot;onClick&quot;&gt;&lt;&#x2F;v-demo&gt;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;.native 修饰符&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;v-btn @click.native&#x3D;&quot;onClick&quot;&gt;&lt;&#x2F;v-btn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var VBtn &#x3D; &#123;</span><br><span class="line">template: &#96;&lt;button&gt;点击我&lt;&#x2F;button&gt;&#96;</span><br><span class="line">&#125;;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">&#39;v-btn&#39;: VBtn</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">onClick(event) &#123;</span><br><span class="line">alert(&#39;我被点击了&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行时，点击按钮时，弹出<code>我被点击了</code>，说明<code>.native</code>修饰符生效。如果去掉<code>.native</code>修饰符后，再次点击按钮没有任何反应。</p><h3 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h3><blockquote><p><code>.native</code>修饰符虽然在一定场景下很使用，但是在尝试监听一个类似<code>&lt;input&gt;</code>的元素时，该修饰符不起作用。为了解决这个问题，Vue 提供了一个 $listeners 属性，它是一个对象，里面包含了作用在这个组件上的所有监听器。</p></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;$listeners&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;文本框内容为：&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;v-input @input.native&#x3D;&quot;onInput&quot;&gt;&lt;&#x2F;v-input&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var VInput &#x3D; &#123;</span><br><span class="line">&#x2F;&#x2F; computed 是计算属性，这个后期会提到</span><br><span class="line">computed: &#123;</span><br><span class="line">inputListeners() &#123;</span><br><span class="line">var vm &#x3D; this;</span><br><span class="line">&#x2F;&#x2F; &#96;Object.assign&#96; 将所有的对象合并为一个新对象</span><br><span class="line">return Object.assign(</span><br><span class="line">&#123;&#125;,</span><br><span class="line">&#x2F;&#x2F; 从父级添加所有的监听器</span><br><span class="line">vm.$listeners,</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F; 复写 input 事件</span><br><span class="line">input(event) &#123;</span><br><span class="line">vm.$emit(&#39;input&#39;, event.target.value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">template: &#96;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">&lt;span&gt;将原生事件绑定到组件：&lt;&#x2F;span&gt;</span><br><span class="line">&lt;input v-on&#x3D;&quot;inputListeners&quot;&gt;</span><br><span class="line">&lt;&#x2F;label&gt;</span><br><span class="line">&#96;</span><br><span class="line">&#125;;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">&#39;v-input&#39;: VInput</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">onInput(event) &#123;</span><br><span class="line">this.msg &#x3D; event.target.value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="题外：-sync修饰符"><a href="#题外：-sync修饰符" class="headerlink" title="题外：.sync修饰符"></a>题外：<code>.sync</code>修饰符</h3><blockquote><ol><li>.sync 修饰符是为了解决prop进行‘双向绑定’的问题。</li><li>需要注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用 (例如 v-bind:title.sync=”doc.title + ‘!’” 是无效的)。</li></ol></blockquote><p>模版代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;v-demo :title.sync&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;v-demo&gt;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;.sync 修饰符&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div&gt;父组件：&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;v-demo :title.sync&#x3D;&quot;msg&quot;&gt;&lt;&#x2F;v-demo&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var VDemo &#x3D; &#123;</span><br><span class="line">props: [ &#39;title&#39; ],</span><br><span class="line">template: &#96;&lt;div&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;div&gt;&#96;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">this.$emit(&#39;update:title&#39;, 123)</span><br><span class="line">&#125;, 2000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: &#39;我是标题&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">&#39;v-demo&#39;: VDemo</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在日常开发中，将<code>input</code>封装成组件这种事还是很常见的，所以第二节中的示例代码还是需要多看看多练习一下。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【011】Vue基础学习：组件基础（三）</title>
      <link href="/2020/03/30/%E3%80%90011%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2020/03/30/%E3%80%90011%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="定义组件名"><a href="#定义组件名" class="headerlink" title="定义组件名"></a>定义组件名</h3><p>两种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用 kebab-case</span><br><span class="line">Vue.component(&#39;my-component-name&#39;, &#123; &#x2F;* ... *&#x2F; &#125;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用 PascalCase</span><br><span class="line">Vue.component(&#39;MyComponentName&#39;, &#123; &#x2F;* ... *&#x2F; &#125;)</span><br></pre></td></tr></table></figure><h3 id="组件的注册"><a href="#组件的注册" class="headerlink" title="组件的注册"></a>组件的注册</h3><blockquote><p>组件的注册分为<code>全局注册</code>和<code>局部注册</code>两种</p></blockquote><h4 id="1-全局注册："><a href="#1-全局注册：" class="headerlink" title="1. 全局注册："></a>1. 全局注册：</h4><p>代码模版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;ComponentName&#39;, &#123;...&#125;);</span><br><span class="line">new Vue(&#123; el: &#39;#app&#39; &#125;)</span><br></pre></td></tr></table></figure><p>在组件基础中的所有代码都为全局注册，这里就不再写示例代码，如有需要可以返回查看。</p><h4 id="2-局部注册"><a href="#2-局部注册" class="headerlink" title="2. 局部注册"></a>2. 局部注册</h4><p>代码模版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 编写 v-demo 组件</span><br><span class="line">var VDemo &#x3D; &#123;</span><br><span class="line">template: &#96;&lt;h1&gt;我是标题&lt;&#x2F;h1&gt;&#96;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注册 v-demo 组件</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">components: &#123;</span><br><span class="line">&#39;v-demo&#39;: VDemo</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;深入了解组件&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;v-demo&gt;&lt;&#x2F;v-demo&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var VDemo &#x3D; &#123;</span><br><span class="line">template: &#96;&lt;h1&gt;我是标题&lt;&#x2F;h1&gt;&#96;</span><br><span class="line">&#125;;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">components: &#123;</span><br><span class="line">&#39;v-demo&#39;: VDemo</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="3-全局注册-和-局部注册-的区别"><a href="#3-全局注册-和-局部注册-的区别" class="headerlink" title="3. 全局注册 和 局部注册 的区别"></a>3. 全局注册 和 局部注册 的区别</h4><p>全局注册往往是不够理想的。比如，如果你使用一个像 webpack 这样的构建系统，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【010】Vue基础学习：组件基础（二）</title>
      <link href="/2020/03/29/%E3%80%90010%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/03/29/%E3%80%90010%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="通过-Prop-向子组件传递数据"><a href="#通过-Prop-向子组件传递数据" class="headerlink" title="通过 Prop 向子组件传递数据"></a>通过 Prop 向子组件传递数据</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#39;v-h1&#39;, &#123;</span><br><span class="line">props: [&#39;msg&#39;],</span><br><span class="line">template: &#96;&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;&#96;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;组件基础&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;v-h1 msg&#x3D;&quot;我是标题&quot;&gt;&lt;&#x2F;v-h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">Vue.component(&#39;v-h1&#39;, &#123;</span><br><span class="line">props: [&#39;msg&#39;],</span><br><span class="line">template: &#96;&lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;&#96;</span><br><span class="line">&#125;);</span><br><span class="line">new Vue(&#123; el: &#39;#app&#39; &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h3><blockquote><p>在我们开发组件时，它的一些功能可能要求我们和父级组件进行沟通。</p></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;组件基础&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;&#123; fontSize: fontSize + &#39;em&#39; &#125;&quot;&gt;</span><br><span class="line">&lt;v-p @big-font&#x3D;&quot;fontSize++&quot;&gt;&lt;&#x2F;v-p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">Vue.component(&#39;v-p&#39;, &#123;</span><br><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;我是标题&lt;&#x2F;p&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;$emit(&#39;big-font&#39;)&quot;&gt;放大文字&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br><span class="line">&#125;);</span><br><span class="line">new Vue(&#123; </span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">fontSize: 1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>通过上面的代码可以发现，子组件可以通过调用内建的<code>$emit</code>方法并传入事件名称来触发一个事件，代码片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;$emit(&#39;big-font&#39;)&quot;&gt;放大文字&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;v-p @big-font&#x3D;&quot;fontSize++&quot;&gt;&lt;&#x2F;v-p&gt;</span><br></pre></td></tr></table></figure><h4 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h4><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;组件基础&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;&#123; fontSize: fontSize + &#39;em&#39; &#125;&quot;&gt;</span><br><span class="line">&lt;v-p @big-font&#x3D;&quot;fontSize +&#x3D; $event&quot;&gt;&lt;&#x2F;v-p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">Vue.component(&#39;v-p&#39;, &#123;</span><br><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;我是标题&lt;&#x2F;p&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;$emit(&#39;big-font&#39;, 0.1)&quot;&gt;放大文字&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br><span class="line">&#125;);</span><br><span class="line">new Vue(&#123; </span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">fontSize: 1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>代码片段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;$emit(&#39;big-font&#39;, 0.1)&quot;&gt;放大文字&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;v-p @big-font&#x3D;&quot;fontSize +&#x3D; $event&quot;&gt;&lt;&#x2F;v-p&gt;</span><br></pre></td></tr></table></figure><p>跟上面的例子做对比可以发现，使用事件抛出一个值时，只需在<code>$emit</code>上添加多一个参数即可，接收时使用<code>$event</code>进行接收。</p><h3 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h3><p>在编写组件的过程中，有时我们希望组件里面能自己定义一些HTML元素，这时我们可以使用<code>&lt;slot&gt;</code>实现。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;组件基础&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;v-demo&gt;</span><br><span class="line">&lt;p style&#x3D;&quot;color: red;&quot;&gt;我是内容&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;v-demo&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">Vue.component(&#39;v-demo&#39;, &#123;</span><br><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;我是标题&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br><span class="line">&#125;);</span><br><span class="line">new Vue(&#123; el: &#39;#app&#39; &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【009】Vue基础学习：组件基础（一）</title>
      <link href="/2020/03/29/%E3%80%90009%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/03/29/%E3%80%90009%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><blockquote><ol><li>在Vue中，组件是一个很强大的功能，组件可以扩展HTML元素，封装可重用的代码。比如在页面中的某一部分需要在多个场景中使用，那么我们可以将需要部分提取出来，从而提高代码的复用率。</li><li>所有的Vue组件都是Vue的实列，因此它可以接受Vue中的所有的生命周期钩子。</li></ol></blockquote><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;组件基础&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;v-btn&gt;&lt;&#x2F;v-btn&gt;</span><br><span class="line">&lt;hr &#x2F;&gt;</span><br><span class="line">&lt;v-btn&gt;&lt;&#x2F;v-btn&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F; 自定义组件</span><br><span class="line">Vue.component(&#39;v-btn&#39;, &#123;</span><br><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">count: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">template: &#96;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; count &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;button @click&#x3D;&#39;count++&#39;&gt;点击我试试&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#96;</span><br><span class="line">&#125;)</span><br><span class="line">&#x2F;&#x2F; 实例化</span><br><span class="line">new Vue(&#123; el: &#39;#app&#39; &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="data-必须是一个函数"><a href="#data-必须是一个函数" class="headerlink" title="data 必须是一个函数"></a>data 必须是一个函数</h3><p>在上面的示例代码中，我们可以看到有一段代码是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: function () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">count: 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>那么，为什么<code>data</code>中的数据需要使用函数<code>return</code>回来，而不直接使用Object形式呢？</p></blockquote><ol><li>vue组件中data值不能为对象，因为对象是引用类型，组件可能会被多个实例同时引用。如果data值为对象，将导致多个实例共享一个对象，其中一个组件改变data属性值，其它实例也会受到影响。</li><li>data为函数，通过return 返回对象的拷贝，致使每个实例都有自己独立的对象，实例之间可以互不影响的改变data属性值。</li></ol><h4 id="例子一【引用类型】："><a href="#例子一【引用类型】：" class="headerlink" title="例子一【引用类型】："></a>例子一【引用类型】：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;例子&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const fn &#x3D; function() &#123;&#125;;</span><br><span class="line">fn.prototype.data &#x3D; &#123; a: 1 &#125;;</span><br><span class="line">const demo01 &#x3D; new fn();</span><br><span class="line">const demo02 &#x3D; new fn();</span><br><span class="line">demo01.data.a &#x3D; 5;</span><br><span class="line">document.getElementById(&#39;app&#39;).innerHTML &#x3D; &#96;</span><br><span class="line">&lt;div&gt;[demo02.data.a]：$&#123;demo02.data.a&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#96;;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器运行上面的代码：可以看到页面显示内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[demo02.data.a]：5</span><br></pre></td></tr></table></figure><blockquote><p>为什么<code>demo02.data.a</code>不是<code>1</code>呢？</p><ul><li>因为每个组件的data都在内存的同一个地址中，一个数据改变了其他也会跟着改变。</li></ul></blockquote><h4 id="例子二【函数】："><a href="#例子二【函数】：" class="headerlink" title="例子二【函数】："></a>例子二【函数】：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;例子&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const fn &#x3D; function() &#123;</span><br><span class="line">this.data &#x3D; this.data();</span><br><span class="line">&#125;;</span><br><span class="line">fn.prototype.data &#x3D; function() &#123;</span><br><span class="line">return &#123; a: 1 &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">const demo01 &#x3D; new fn();</span><br><span class="line">const demo02 &#x3D; new fn();</span><br><span class="line">demo01.data.a &#x3D; 5;</span><br><span class="line">document.getElementById(&#39;app&#39;).innerHTML &#x3D; &#96;</span><br><span class="line">&lt;div&gt;[demo02.data.a]：$&#123;demo02.data.a&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&#96;;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>打开浏览器运行上面的代码：可以看到页面显示内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[demo02.data.a]：1</span><br></pre></td></tr></table></figure><blockquote><p>为什么<code>demo02.data.a</code>是<code>1</code>呢？</p><ul><li>因为data是一个函数时，每个组件实例都有自己的作用域，每个实例相互独立,不会相互影响</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【008】Vue基础学习：其他指令</title>
      <link href="/2020/03/28/%E3%80%90008%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%85%B6%E4%BB%96%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/03/28/%E3%80%90008%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%85%B6%E4%BB%96%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="v-once-指令"><a href="#v-once-指令" class="headerlink" title="v-once 指令"></a>v-once 指令</h3><blockquote><p>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-once&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-once&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;input v-model&#x3D;&quot;msg&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: 123</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中运行代码时可以发现，在文本框中输入内容时，div元素中的内容并没有跟着改变，这是因为在浏览器运行时，DOM元素已经渲染完成了。</p><h3 id="v-pre-指令"><a href="#v-pre-指令" class="headerlink" title="v-pre 指令"></a>v-pre 指令</h3><blockquote><p>跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。 </p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-pre&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-pre&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: 123</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中运行代码时可以看到，页面显示的内容为<code></code>。</p><h3 id="v-cloak-指令"><a href="#v-cloak-指令" class="headerlink" title="v-cloak 指令"></a>v-cloak 指令</h3><blockquote><p>这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。 </p></blockquote><p>css写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[v-cloak] &#123;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-cloak&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">[v-cloak] &#123;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-cloak&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg: 123</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;div v-cloak&gt;&lt;/div&gt;</code>里的内容不会显示，直到编译结束后才会进行显示。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【007】Vue基础学习：v-bind的使用</title>
      <link href="/2020/03/28/%E3%80%90007%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-bind%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/28/%E3%80%90007%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-bind%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>v-bind 用于处理 HTML 中的标签属性。</p></blockquote><h3 id="class-对象语法"><a href="#class-对象语法" class="headerlink" title="class 对象语法"></a>class 对象语法</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:class&#x3D;&quot;&#123; green: isActive01 &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">多个：</span><br><span class="line">&lt;div v-bind:class&#x3D;&quot;&#123; red: isActive02, font: isActive03 &#125;&quot;&gt;白色&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- -------------------- 简写 -------------------- --&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;&#123; green: isActive01 &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">多个：</span><br><span class="line">&lt;div :class&#x3D;&quot;&#123; red: isActive02, font: isActive03 &#125;&quot;&gt;白色&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line"> &lt;title&gt;v-bind class&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">.blue &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">.green &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">.red &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.font &#123;</span><br><span class="line">color: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"> &lt;div v-bind:class&#x3D;&quot;styl&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-bind:class&#x3D;&quot;&#123; green: isActive01 &#125;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-bind:class&#x3D;&quot;&#123; red: isActive02, font: isActive03 &#125;&quot;&gt;白色&lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line"> el: &#39;#app&#39;,</span><br><span class="line"> data() &#123;</span><br><span class="line"> return &#123;</span><br><span class="line"> styl: &#39;blue&#39;,</span><br><span class="line">isActive01: true,</span><br><span class="line">isActive02: true,</span><br><span class="line">isActive03: true</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="class-数组语法"><a href="#class-数组语法" class="headerlink" title="class 数组语法"></a>class 数组语法</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:class&#x3D;&quot;[ class01, class02 ]&quot;&gt;白色&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- -------------------- 简写 -------------------- --&gt;</span><br><span class="line">&lt;div :class&#x3D;&quot;[ class01, class02 ]&quot;&gt;白色&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-bind class&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">.red &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.font &#123;</span><br><span class="line">color: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-bind:class&#x3D;&quot;[ class01, class02 ]&quot;&gt;白色&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">class01: &#39;red&#39;,</span><br><span class="line">class02: &#39;font&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="style-对象语法"><a href="#style-对象语法" class="headerlink" title="style 对象语法"></a>style 对象语法</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style&#x3D;&quot;&#123; color: &#39;red&#39;, fontSize: &#39;50px&#39; &#125;&quot;&gt;文字&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- -------------------- 简写 -------------------- --&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;&#123; color: &#39;red&#39;, fontSize: &#39;50px&#39; &#125;&quot;&gt;文字&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-bind style&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-bind:style&#x3D;&quot;&#123; color: &#39;red&#39;, fontSize: &#39;50px&#39; &#125;&quot;&gt;文字&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-bind:style&#x3D;&quot;styleObject&quot;&gt;白色&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">styleObject: &#123;</span><br><span class="line">width: &#39;100px&#39;,</span><br><span class="line">height: &#39;100px&#39;,</span><br><span class="line">backgroundColor: &#39;red&#39;,</span><br><span class="line">color: &#39;white&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>注：当样式类似于<code>font-size</code>这种形式时，需要改写为<code>fontSize</code>。</p><h3 id="style-数组语法"><a href="#style-数组语法" class="headerlink" title="style 数组语法"></a>style 数组语法</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style&#x3D;&quot;[style01, style02]&quot;&gt;文字&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- -------------------- 简写 -------------------- --&gt;</span><br><span class="line">&lt;div :style&#x3D;&quot;[style01, style02]&quot;&gt;文字&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-bind style&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-bind:style&#x3D;&quot;[style01, style02]&quot;&gt;文字&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">style01: &#123;</span><br><span class="line">width: &#39;100px&#39;,</span><br><span class="line">height: &#39;100px&#39;,</span><br><span class="line">backgroundColor: &#39;red&#39;</span><br><span class="line">&#125;,</span><br><span class="line">style02: &#123;</span><br><span class="line">color: &#39;white&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><p>v-bind 不仅用于 class 和 style 中，还用于其它，如：src，href等等。<br>当<code>v-bind:style</code>使用需要添加浏览器引擎前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【006】Vue基础学习：v-model的使用</title>
      <link href="/2020/03/27/%E3%80%90006%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-model%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/27/%E3%80%90006%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-model%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model&#x3D;&quot;message&quot;&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-model&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;input v-model&#x3D;&quot;message&quot; &#x2F;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &#39;123&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件后，在文本框输入内容时可以看到文本框下面的内容也在跟着变化，这是因为v-model 指令在表单<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>及<code>&lt;select&gt;</code>元素上创建双向数据绑定，它会根据控件类型自动选取正确的方法来更新元素。</p><p>注意：<br>v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p><h3 id="常见修饰符"><a href="#常见修饰符" class="headerlink" title="常见修饰符"></a>常见修饰符</h3><table><thead><tr><th>修饰符</th><th>说明</th></tr></thead><tbody><tr><td>.lazy</td><td>取代 input 监听 change 事件。</td></tr><tr><td>.number</td><td>输入字符串转为数字。</td></tr><tr><td>.trim</td><td>输入去掉首尾空格。</td></tr></tbody></table><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.trim&#x3D;&quot;msg&quot;&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-model&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;input v-model.trim&#x3D;&quot;message&quot; &#x2F;&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &#39;123&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件后，可以看到在文本框的头和尾输入空格是无效的。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【005】Vue基础学习：v-on的使用</title>
      <link href="/2020/03/27/%E3%80%90005%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-on%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/27/%E3%80%90005%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-on%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Vue使用<code>v-on</code>指令监听<code>DOM</code>事件，在开发过程中，可以将其绑定在DOM节点上，以此监听DOM事件来触发一些javascript代码。</p><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click&#x3D;&quot;onClick&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">或简写：</span><br><span class="line">&lt;button @click&#x3D;&quot;onClick&quot;&gt;点击&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-on&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;onClick&quot;&gt;点击&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">methods: &#123;</span><br><span class="line">onClick() &#123;</span><br><span class="line">alert(&#39;我被点击了&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件后，点击里面的按钮可以看到成功弹出<code>我被点击了</code></p><h3 id="回车事件"><a href="#回车事件" class="headerlink" title="回车事件"></a>回车事件</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-on:keyup.enter&#x3D;&quot;onEnter&quot; &#x2F;&gt;</span><br><span class="line">或简写：</span><br><span class="line">&lt;input @keyup.enter&#x3D;&quot;onEnter&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-on&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;input @keyup.enter&#x3D;&quot;onEnter&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">methods: &#123;</span><br><span class="line">onEnter() &#123;</span><br><span class="line">alert(&#39;我被回车了&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件后，点击文本框，然后回车可以看到成功弹出<code>我被点击了</code></p><h3 id="常见修饰符"><a href="#常见修饰符" class="headerlink" title="常见修饰符"></a>常见修饰符</h3><blockquote><p>在日常开发中，经常会使用<code>event.preventDefault</code>（阻止节点默认行为）和<code>event.stopPropagation</code>（阻止事件冒泡），Vue将其封装成简短易用的事件修饰符，可以写在事件名称的后面。</p></blockquote><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>.stop</td><td>阻止事件冒泡</td></tr><tr><td>.prevent</td><td>阻止元素默认行为</td></tr><tr><td>.capture</td><td>阻止事件捕获</td></tr><tr><td>.self</td><td>限制事件仅作用于节点自身</td></tr><tr><td>.once</td><td>事件被触发一次后即解除监听</td></tr><tr><td>.passive</td><td>可用在移动端滚动事件中，限制事件永不调用preventDefault()方法</td></tr></tbody></table><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form @submit.prevent&#x3D;&quot;onSubmit&quot;&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-on&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;form @submit.prevent&#x3D;&quot;onSubmit&quot;&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;submit&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">methods: &#123;</span><br><span class="line">onSubmit() &#123;</span><br><span class="line">alert(&#39;我被提交了&#39;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>代码说明：当未指定form表单的<code>action</code>时，表单会被提交到当前的URL，所以可以使用<code>.prevent</code>阻止元素默认行为。</p><h3 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h3><table><thead><tr><th>别名修饰符</th><th>键值修饰符</th><th>对应按键</th></tr></thead><tbody><tr><td>.delete</td><td>.8/.46</td><td>回车/删除</td></tr><tr><td>.tab</td><td>.9</td><td>制表</td></tr><tr><td>.enter</td><td>.13</td><td>回车</td></tr><tr><td>.esc</td><td>.27</td><td>退出</td></tr><tr><td>.space</td><td>.32</td><td>空格</td></tr><tr><td>.left</td><td>.37</td><td>左</td></tr><tr><td>.up</td><td>.38</td><td>上</td></tr><tr><td>.right</td><td>.39</td><td>右</td></tr><tr><td>.down</td><td>.40</td><td>下</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>v-on 在平时开发中是很常用的，触发事件也有很多，在这里就不一一列举了，如果有兴趣，可以上网搜索下。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【004】Vue基础学习：v-text和v-html的使用</title>
      <link href="/2020/03/26/%E3%80%90004%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-text%E5%92%8Cv-html%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/26/%E3%80%90004%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-text%E5%92%8Cv-html%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在上面几章中，我们写入数据采用的都是<code></code>的方式，<br>但是有时我们会看到一个现象，那就是当我们刷新页面时，页面会先出现<code></code>这几个文字，<br>然后才出现或者不出现我们想要的内容。造出这种现象的原因是网速较慢或者加载vue.js文件报错，<br>导致数据无法成功渲染。这时我们可以使用 v-text 和 v-html 解决这个问题。</p><h3 id="v-text-的使用"><a href="#v-text-的使用" class="headerlink" title="v-text 的使用"></a>v-text 的使用</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-text&#x3D;&quot;title&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-text&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-text&#x3D;&quot;title&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">title: &#39;v-text&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件，可以看到成功显示出<code>v-text</code></p><h3 id="v-html-的使用"><a href="#v-html-的使用" class="headerlink" title="v-html 的使用"></a>v-html 的使用</h3><blockquote><p>v-text 会将数据解释为纯文本，而非HTML。有时我们需要输出真正的HTML，这时就可以使用<code>v-html</code>。</p></blockquote><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-html&#x3D;&quot;title&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-html&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;div v-html&#x3D;&quot;title&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">title: &#39;&lt;h1&gt;v-html&lt;&#x2F;h1&gt;&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件，可以看到成功显示出<code>v-html</code></p><p>注意：生产环境中动态渲染HTML是非常危险的，容易导致XSS攻击。所以在使用v-html时，不要在用户提交或可操作的网页上使用。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【003】Vue基础学习：v-for的使用</title>
      <link href="/2020/03/26/%E3%80%90003%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-for%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/26/%E3%80%90003%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-for%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="v-for-的基本用法"><a href="#v-for-的基本用法" class="headerlink" title="v-for 的基本用法"></a>v-for 的基本用法</h3><blockquote><p>v-for 用于实现列表渲染，可以使用<code>item in items</code>和<code>item of items</code>的语法</p></blockquote><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for&#x3D;&quot;item in items&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">或：</span><br><span class="line">&lt;li v-for&#x3D;&quot;item of items&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure><p>js写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">items: [1, 2, 3, 4, 5]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-for&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for&#x3D;&quot;item in items&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">items: [1, 2, 3, 4, 5]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件，可以看到成功显示出如下数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="v-for-渲染对象的键值对"><a href="#v-for-渲染对象的键值对" class="headerlink" title="v-for 渲染对象的键值对"></a>v-for 渲染对象的键值对</h3><blockquote><p>键值对是元素的索引值，也就是本例中的对象在数组中所占的下标。</p></blockquote><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for&#x3D;&quot;(item, index) in items&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">或：</span><br><span class="line">&lt;li v-for&#x3D;&quot;(item, item) of items&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure><p>其实就是多了一个<code>index</code>。</p><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-for&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for&#x3D;&quot;(item, index) in items&quot;&gt;</span><br><span class="line">&#123;&#123; item &#125;&#125; --- &#123;&#123; index &#125;&#125;</span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">items: [1, 2, 3, 4, 5]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件，可以看到成功显示出如下数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 --- 0</span><br><span class="line">2 --- 1</span><br><span class="line">3 --- 2</span><br><span class="line">4 --- 3</span><br><span class="line">5 --- 4</span><br></pre></td></tr></table></figure><h3 id="key的说明"><a href="#key的说明" class="headerlink" title="key的说明"></a><code>key</code>的说明</h3><ol><li>就地复用策略：当在进行列表渲染时，vue会直接对已有的标签进行复用，不会将所有的标签重新删除和创建，只会创建新的元素然后把新的数据渲染进去。</li><li>key属性可以用来提升v-for渲染的效率，vue不会去改变原有的元素和数据，而是创建新的元素然后把新的数据渲染进去。</li><li>key属性必须是唯一的标识，很多人使用<code>index</code>，不过建议使用数据的<code>id</code>可能会更好。</li><li>是否使用<code>key</code>都不会影响功能的实现，但是在<code>vue2.2.0+</code>版本中，如果不实用<code>key</code>，将会出现警告。</li></ol><h3 id="key的使用"><a href="#key的使用" class="headerlink" title="key的使用"></a><code>key</code>的使用</h3><p>模版写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for&#x3D;&quot;(item, index) in items&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">或：</span><br><span class="line">&lt;li v-for&#x3D;&quot;(item, item) of items&quot; :key&#x3D;&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;&#x2F;li&gt;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;v-for&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li </span><br><span class="line">v-for&#x3D;&quot;(item, index) in items&quot;</span><br><span class="line">:key&#x3D;&quot;index&quot;</span><br><span class="line">&gt;</span><br><span class="line">&#123;&#123; item &#125;&#125; --- &#123;&#123; index &#125;&#125;</span><br><span class="line">&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">items: [1, 2, 3, 4, 5]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件，可以看到成功显示出如下数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 --- 0</span><br><span class="line">2 --- 1</span><br><span class="line">3 --- 2</span><br><span class="line">4 --- 3</span><br><span class="line">5 --- 4</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上各种例子可以发现，其实v-for也不会太难，而且在工作中，v-for是经常使用的，比如在加载商品列表时会使用，加载信息记录时也会使用，所以平时需要多写一下。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【002】Vue基础学习：v-if和v-show的使用</title>
      <link href="/2020/03/25/%E3%80%90002%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-if%E5%92%8Cv-show%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/03/25/%E3%80%90002%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9Av-if%E5%92%8Cv-show%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="先写一个例子"><a href="#先写一个例子" class="headerlink" title="先写一个例子"></a>先写一个例子</h3><p>创建一个<code>HelloWorld.html</code>文件，开始写入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Hello World&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">el: &#39;#app&#39;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">title: &#39;Hello World&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件，可以看到<code>Hello World</code>成功显示出来。</p><h3 id="v-if-v-show-指令"><a href="#v-if-v-show-指令" class="headerlink" title="v-if, v-show 指令"></a>v-if, v-show 指令</h3><ul><li>v-if 的使用  </li></ul><blockquote><p>用来判断是否加载html的DOM  </p><p><code>v-if</code> 的使用方法并不复杂，只需要挂在元素上即可，与之配套的有 <code>v-else-if</code> 和 <code>v-else</code>，这两个只能个 <code>v-if</code> 配套使用。</p></blockquote><p>创建一个<code>v-if.html</code>文件，开始写入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line"> &lt;title&gt;v-if&lt;&#x2F;title&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"> &lt;div v-if&#x3D;&quot;isShow&quot;&gt;isShow 为 true，所以我要显示出来&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div v-else&gt;isShow 为 false，所以我要隐藏出来&lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line"> el: &#39;#app&#39;,</span><br><span class="line"> data() &#123;</span><br><span class="line"> return &#123;</span><br><span class="line"> isShow: true</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件，可以看到<code>isShow 为 true，所以我要显示出来</code>成功显示出来。<br>如果将 <code>isShow</code> 的值修改为 <code>false</code>，则显示出<code>isShow 为 false，所以我要隐藏出来</code></p><ul><li>v-show 的使用</li></ul><blockquote><p>调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。</p></blockquote><p>创建一个<code>v-show.html</code>文件，开始写入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line"> &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line"> &lt;title&gt;v-show&lt;&#x2F;title&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line"> &lt;div v-show&#x3D;&quot;isShow&quot;&gt;isShow 为 true，所以我要显示出来&lt;&#x2F;div&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"> &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"> var vm &#x3D; new Vue(&#123;</span><br><span class="line"> el: &#39;#app&#39;,</span><br><span class="line"> data() &#123;</span><br><span class="line"> return &#123;</span><br><span class="line"> isShow: false</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器运行此文件，可以看到页面一片空白什么都没有。但是，当打开浏览器调试界面<code>按F12</code>时，可以看到有以下代码出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;display: none;&quot;&gt;isShow 为 true，所以我要显示出来&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>由此可以看出，其实内容已经加载出来了，只是使用了 css 中的 <code>display: none;</code> 给隐藏了。</p><h3 id="v-if-和-v-show-的区别"><a href="#v-if-和-v-show-的区别" class="headerlink" title="v-if 和 v-show 的区别"></a>v-if 和 v-show 的区别</h3><ul><li>v-if 在切换中将组件上的事件监听器和子组件销毁和重建。</li><li>v-show 调整了 dispaly 属性，可以使客户端操作更加流畅。</li><li>v-show 有更高的初始渲染开销，而 v-if 有更高的切换开销。</li></ul><p>简单点理解就是：v-if被判定为假时，Vue不会做任何事情，而 v-show 不管为真假，Vue都会进行DOM渲染。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【001】Vue基础学习：前期准备</title>
      <link href="/2020/03/25/%E3%80%90001%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
      <url>/2020/03/25/%E3%80%90001%E3%80%91Vue%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%EF%BC%9A%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h3 id="学习Vue的前提条件"><a href="#学习Vue的前提条件" class="headerlink" title="学习Vue的前提条件"></a>学习<code>Vue</code>的前提条件</h3><ul><li>HTML的基础知识，比如基本元素的使用和结构代码的编写  </li><li>CSS的基础知识，比如常见样式的编写和页面的布局  </li><li>Javascript的基础知识，比如常见函数的使用  </li><li>如果能懂一点node 和 webpack，那就更好了</li></ul><h3 id="开发工具的选用"><a href="#开发工具的选用" class="headerlink" title="开发工具的选用"></a>开发工具的选用</h3><p>开发工具的选用并没有太多的要求，只要适合自己的就行，我在三年前使用的是<code>WebStorm</code>，现在使用的是<code>VSCode</code>。</p><h3 id="安装和引入"><a href="#安装和引入" class="headerlink" title="安装和引入"></a>安装和引入</h3><p>在<a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener"><code>Vue官网</code></a>中有两个版本，分别是：  </p><ol><li>开发版本：包含了完整的警告和调试模式  </li><li>生产版本：删除了警告  </li></ol><h4 id="1，安装方式一：直接用-lt-script-gt-引入（不推荐）"><a href="#1，安装方式一：直接用-lt-script-gt-引入（不推荐）" class="headerlink" title="1，安装方式一：直接用&lt;script&gt;引入（不推荐）"></a>1，安装方式一：直接用<code>&lt;script&gt;</code>引入（不推荐）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 最新版本 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 明确的版本号 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2.6.11&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="2，安装方式二：使用npm进行安装（推荐）"><a href="#2，安装方式二：使用npm进行安装（推荐）" class="headerlink" title="2，安装方式二：使用npm进行安装（推荐）"></a>2，安装方式二：使用<code>npm</code>进行安装（推荐）</h4><p>打开cmd命令窗口，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install vue</span><br><span class="line">或：</span><br><span class="line">npm i vue</span><br></pre></td></tr></table></figure><p>注：</p><blockquote><p>npm是随同NodeJS一起安装的包管理工具，新版的nodejs已经集成了npm，所以不需要另外安装npm，可以通过输入 “npm -v” 进行检测是否安装成功。  </p></blockquote><p>nodejs的安装方法比较简单，不懂的可以<code>百度</code>或<code>谷歌</code>，这里就不再阐述。</p><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装<code>cnpm</code></h3><blockquote><p>由于用于npm的仓库源是在国外，资源传输速度较慢而且可能会受到限制，所以建议使用淘宝镜像源<code>cnpm</code></p></blockquote><p>打开cmd命令窗口，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm -registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>执行完后，可输入以下命令进行检测<code>cnpm</code>是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p>使用<code>cnpm</code>安装vue：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cnpm install vue</span><br><span class="line">或：</span><br><span class="line">cnpm i vue</span><br></pre></td></tr></table></figure><p>执行完后，可输入以下命令进行检测<code>Vue</code>是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>前期准备差不多就这些了，其中官网推荐在浏览器安装<a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener"><code>Vue Devtools</code></a>，这个我想在后面需要用时再进行安装。还有脚手架<code>vue-cli</code>也会在<code>Vue</code>基础学完后进行使用。<br>好了，下一章就准备开始写vue了。</p>]]></content>
      
      
      <categories>
          
          <category> Vue2.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6中的map、forEach、filter、reduce</title>
      <link href="/2019/11/26/%E3%80%90806%E3%80%91es6%E4%B8%AD%E7%9A%84map%E3%80%81forEach%E3%80%81filter%E3%80%81reduce/"/>
      <url>/2019/11/26/%E3%80%90806%E3%80%91es6%E4%B8%AD%E7%9A%84map%E3%80%81forEach%E3%80%81filter%E3%80%81reduce/</url>
      
        <content type="html"><![CDATA[<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>​遍历数组中每个元素并返回一个新数组，不改变原始数组，原始数组元素顺序依次处理元素。 </p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1, 2, 3];</span><br><span class="line">let newArr &#x3D; arr.map((x, y, z) &#x3D;&gt; &#123;</span><br><span class="line">console.log(x, y, z);</span><br><span class="line">&#x2F;&#x2F; 1 0 [1, 2, 3]</span><br><span class="line">&#x2F;&#x2F; 2 1 [1, 2, 3]</span><br><span class="line">&#x2F;&#x2F; 3 2 [1, 2, 3]</span><br><span class="line">return Math.pow(x, 2);</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&#39;----------&#39;);</span><br><span class="line">console.log(newArr); &#x2F;&#x2F; [1, 4, 9]</span><br></pre></td></tr></table></figure><p>注意：map() 不会对空数组进行检测。</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote><p>遍历数组中每个元素，并将元素传递给回调函数，但是没有返回值。</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1, 2, 3];</span><br><span class="line">arr.forEach((x, y, z) &#x3D;&gt; &#123;</span><br><span class="line">console.log(x, y, z);</span><br><span class="line">&#x2F;&#x2F; 1 0 [1, 2, 3]</span><br><span class="line">&#x2F;&#x2F; 2 1 [1, 2, 3]</span><br><span class="line">&#x2F;&#x2F; 3 2 [1, 2, 3]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意: forEach() 对于空数组是不会执行回调函数的。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><blockquote><p>遍历数组中每个元素返回一个满足返回条件的新数组，起到一个过滤作用。<br>简单点说就是，新数组中的元素是通过检查指定数组中符合条件的所有元素，不符合条件的元素就会被过滤掉。</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1, 2, 3];</span><br><span class="line">let newArr &#x3D; arr.filter((x, y, z) &#x3D;&gt; &#123;</span><br><span class="line">console.log(x, y, z);</span><br><span class="line">&#x2F;&#x2F; 1 0 [1, 2, 3]</span><br><span class="line">&#x2F;&#x2F; 2 1 [1, 2, 3]</span><br><span class="line">&#x2F;&#x2F; 3 2 [1, 2, 3]</span><br><span class="line">return x &gt; 1;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(newArr); &#x2F;&#x2F; [2, 3]</span><br></pre></td></tr></table></figure><p>注意：filter() 不会对空数组进行检测，也不会改变原始数组。</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote><p>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算出一个值。比如，我们计算【1+2+3+4+5=？】时可以用此方法。</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1, 2, 3];</span><br><span class="line">let total &#x3D; arr.reduce((num , arg) &#x3D;&gt; &#123;</span><br><span class="line">console.log(num, arg);</span><br><span class="line">&#x2F;&#x2F; 1 2</span><br><span class="line">&#x2F;&#x2F; 3 3</span><br><span class="line">return num + arg;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(total); &#x2F;&#x2F; 6</span><br></pre></td></tr></table></figure><p>注意: reduce() 对于空数组是不会执行回调函数的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>map 和 filter 都是 immutable methods，也就是说它们只会返回一个新数组，而不会改变原来的那个数组。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise的使用</title>
      <link href="/2019/11/26/%E3%80%90805%E3%80%91promise%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/26/%E3%80%90805%E3%80%91promise%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>promise</code></a></p><blockquote><p>promise 对象是一个代理对象（代理一个值），被代理的值在promise对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法（handlers）。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的promise对象</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new Promise( function(resolve, reject) &#123;...&#125; &#x2F;* executor *&#x2F;  );</span><br></pre></td></tr></table></figure><blockquote><p>executor是带有 resolve 和 reject 两个参数的函数 。Promise构造函数执行时立即调用executor 函数， resolve 和 reject 两个函数作为参数传递给executor（executor 函数在Promise构造函数返回所建promise实例对象前被调用）。resolve 和 reject 函数被调用时，分别将promise的状态改为fulfilled（完成）或rejected（失败）。executor 内部通常会执行一些异步操作，一旦异步操作执行完毕(可能成功/失败)，要么调用resolve函数来将promise状态改成fulfilled，要么调用reject 函数将promise的状态改为rejected。如果在executor函数中抛出一个错误，那么该promise 状态为rejected。executor函数的返回值被忽略。</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let demo &#x3D; new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">resolve(&#39;success&#39;);</span><br><span class="line">reject(&#39;failed&#39;) ;</span><br><span class="line">&#125;)</span><br><span class="line">demo.then((result) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(result);</span><br><span class="line">&#125;, (result) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="promise的三种状态"><a href="#promise的三种状态" class="headerlink" title="promise的三种状态"></a>promise的三种状态</h3><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>pending</td><td>初始状态，既不是成功，也不是失败状态</td></tr><tr><td>fulfilled</td><td>意味着操作成功完成</td></tr><tr><td>rejected</td><td>意味着操作失败</td></tr></tbody></table><h3 id="promise的链式调用"><a href="#promise的链式调用" class="headerlink" title="promise的链式调用"></a>promise的链式调用</h3><ul><li>Promise.prototype.then</li><li>Promise.prototype.catch</li></ul><h3 id="promise的作用"><a href="#promise的作用" class="headerlink" title="promise的作用"></a>promise的作用</h3><p>主要是解决地狱回调的问题</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js原型链</title>
      <link href="/2019/11/26/%E3%80%90804%E3%80%91js%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2019/11/26/%E3%80%90804%E3%80%91js%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有限的实例对象和原型之间组成有限链，用来实现共享属性和继承的。</p></blockquote><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function fn01()&#123;</span><br><span class="line">   this.name01 &#x3D; &#39;fn01&#39;;</span><br><span class="line">&#125;</span><br><span class="line">function fn02()&#123;</span><br><span class="line">   this.name02 &#x3D; &#39;fn02&#39;;</span><br><span class="line">&#125;</span><br><span class="line">fn02.prototype &#x3D; new fn01();</span><br><span class="line">function fn03()&#123;</span><br><span class="line">   this.name03 &#x3D; &#39;fn03&#39;;</span><br><span class="line">&#125;</span><br><span class="line">fn03.prototype &#x3D; new fn02();</span><br><span class="line">let newFn &#x3D; new fn03();</span><br><span class="line">console.log(newFn);</span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name03: &quot;fn03&quot;</span><br><span class="line">__proto__: fn01</span><br><span class="line">name02: &quot;fn02&quot;</span><br><span class="line">__proto__: fn01</span><br><span class="line">name01: &quot;fn01&quot;</span><br><span class="line">__proto__:</span><br><span class="line">constructor: ƒ fn01()</span><br><span class="line">__proto__: Object</span><br></pre></td></tr></table></figure><h3 id="构造函数、原型和实例的关系"><a href="#构造函数、原型和实例的关系" class="headerlink" title="构造函数、原型和实例的关系"></a>构造函数、原型和实例的关系</h3><ul><li>构造函数都有一个属性prototype，这个属性是一个对象（Object的实例）</li><li>原型对象prototype里面有一个constructor属性，该属性指向原型对象所属的构造函数</li><li>实例对象都有一个_proto_属性，该属性也指向构造函数的原型对象，它是一个非标准属性，不可以用于编程，它是用于浏览器自己使用的</li></ul><h3 id="prototype与-proto-的关系"><a href="#prototype与-proto-的关系" class="headerlink" title="prototype与_proto_的关系"></a><code>prototype</code>与<code>_proto_</code>的关系</h3><ul><li><code>prototype</code>是构造函数的属性</li><li><code>_proto_</code>是实例对象的属性</li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中call()、apply()、bind()的区别及用法</title>
      <link href="/2019/11/26/%E3%80%90803%E3%80%91js%E4%B8%ADcall-apply-bind%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E7%94%A8%E6%B3%95/"/>
      <url>/2019/11/26/%E3%80%90803%E3%80%91js%E4%B8%ADcall-apply-bind%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>call()</td><td>call(对象, arg1, arg2, …)</td></tr><tr><td>apply()</td><td>apply(对象，[arg1,arg2, …])</td></tr><tr><td>bind()</td><td>函数.bind(对象, arg1, arg2, …)</td></tr></tbody></table><ul><li>相同点：都是用来改变this的指向</li><li>不同点：参数书写方式不同</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">let obj &#x3D; &#123;</span><br><span class="line">name: &#39;name&#39;,</span><br><span class="line">age: 18</span><br><span class="line">&#125;;</span><br><span class="line">function fn(x, y) &#123;</span><br><span class="line">console.log(x, y, this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.call(obj, &#39;call-xiao&#39;, &#39;call-ming&#39;); </span><br><span class="line">        &#x2F;&#x2F; call-xiao call-ming &#123;name: &quot;name&quot;, age: 18&#125;</span><br><span class="line"></span><br><span class="line">fn.apply(obj, [&#39;apply-xiao&#39;, &#39;apply-ming&#39;]); </span><br><span class="line">        &#x2F;&#x2F; apply-xiao apply-ming &#123;name: &quot;name&quot;, age: 18&#125;</span><br><span class="line"></span><br><span class="line">let newFn &#x3D; fn.bind(obj, &#39;bind-xiao&#39;, &#39;bind-ming&#39;);</span><br><span class="line">newFn(); </span><br><span class="line">        &#x2F;&#x2F; bind-xiao bind-ming &#123;name: &quot;name&quot;, age: 18&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="call-的应用"><a href="#call-的应用" class="headerlink" title="call()的应用"></a><code>call()</code>的应用</h3><ul><li><p>利用call()判断数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let type &#x3D; Object.prototype.toString.call(12);</span><br><span class="line">console.log(type);</span><br></pre></td></tr></table></figure></li><li><p>利用call()翻转字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let str &#x3D; &#39;hello&#39;;</span><br><span class="line">&#x2F;&#x2F; 方式一，方法内有使用call()</span><br><span class="line">let arr01 &#x3D; Array.from(str).reverse().join(&#39;&#39;);</span><br><span class="line">console.log(arr01); &#x2F;&#x2F; olleh</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 方式二</span><br><span class="line">let arr02 &#x3D; Array.prototype.reverse.call(str.split(&#39;&#39;)).join(&#39;&#39;);</span><br><span class="line">console.log(arr02); &#x2F;&#x2F; olleh</span><br></pre></td></tr></table></figure></li></ul><h3 id="apply-的应用"><a href="#apply-的应用" class="headerlink" title="apply()的应用"></a><code>apply()</code>的应用</h3><p>利用apply()求最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; [1, 4, 2, 3, 9, 7];</span><br><span class="line">let max &#x3D; Math.max.apply(arr, arr); </span><br><span class="line">&#x2F;&#x2F; 第一个arr表示让arr借用max这个方法，第二个arr表示传给max的数据</span><br><span class="line">console.log(max); &#x2F;&#x2F; 9</span><br></pre></td></tr></table></figure><h3 id="bind-的应用"><a href="#bind-的应用" class="headerlink" title="bind()的应用"></a><code>bind()</code>的应用</h3><p>对一个函数预设初始参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fn() &#123;</span><br><span class="line">return Array.from(arguments);</span><br><span class="line">&#125;</span><br><span class="line">let newFn &#x3D; fn.bind(this, 1, 2);</span><br><span class="line">console.log(newFn()); &#x2F;&#x2F; [1, 2]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html文本和元素垂直居中</title>
      <link href="/2019/11/25/%E3%80%90802%E3%80%91html%E6%96%87%E6%9C%AC%E5%92%8C%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
      <url>/2019/11/25/%E3%80%90802%E3%80%91html%E6%96%87%E6%9C%AC%E5%92%8C%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="单行文本的垂直居中"><a href="#单行文本的垂直居中" class="headerlink" title="单行文本的垂直居中"></a>单行文本的垂直居中</h3><table><thead><tr><th>类型</th><th>属性</th><th>值</th></tr></thead><tbody><tr><td>水平居中</td><td>text-align</td><td>center</td></tr><tr><td>垂直居中</td><td>line-height</td><td>XXpx</td></tr></tbody></table><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">#div01 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;div01&quot;&gt;</span><br><span class="line">&lt;span&gt;name&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="多行文本的垂直居中"><a href="#多行文本的垂直居中" class="headerlink" title="多行文本的垂直居中"></a>多行文本的垂直居中</h3><p>使用<code>display:table</code>来实现 </p><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>display</td><td>table</td><td>使块状元素成为一个块级表格</td></tr><tr><td>display</td><td>table-cell</td><td>子元素设置成表格单元格</td></tr><tr><td>vertical-align</td><td>middle</td><td>使表格内容居中显示，即可实现垂直居中的效果</td></tr></tbody></table><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">#div01 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">text-align: center;</span><br><span class="line">display: table;</span><br><span class="line">&#125;</span><br><span class="line">#div01 span &#123;</span><br><span class="line">display: table-cell;</span><br><span class="line">vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;div01&quot;&gt;</span><br><span class="line">&lt;span&gt;name&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="元素的垂直居中"><a href="#元素的垂直居中" class="headerlink" title="元素的垂直居中"></a>元素的垂直居中</h3><p>1，使用absolute与transform配合实现</p><p>步骤：</p><ul><li>首先给父级元素添加相对定位<code>position: relative;</code></li><li>然后给子级元素添加绝对定位 <code>position: absolute;</code>（即需要垂直居中的元素）</li><li>最后让子级距离父级左边和上边分别为<code>left: 50%; top: 50%; transform: translate(-50%, -50%);</code></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">#div01 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">#div02 &#123;</span><br><span class="line">width: 30px;</span><br><span class="line">height: 30px;</span><br><span class="line">background-color: red;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;div01&quot;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;div02&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>2，使用<code>flex</code>实现</p><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>display</td><td>flex</td><td>弹性容器</td></tr><tr><td>justify-content</td><td>center</td><td>定义了项目在主轴上的对齐方式，水平对齐居中</td></tr><tr><td>align-items</td><td>center</td><td>定义项目在交叉轴（纵轴）上如何对齐，垂直对齐居中</td></tr></tbody></table><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">#div01 &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">#div02 &#123;</span><br><span class="line">width: 30px;</span><br><span class="line">height: 30px;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;div01&quot;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;div02&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.defineProperty 的基本使用</title>
      <link href="/2019/11/08/%E3%80%90801%E3%80%91Object-defineProperty%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/08/%E3%80%90801%E3%80%91Object-defineProperty%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener"><code>Object.defineProperty</code></a></p><h3 id="一，语法"><a href="#一，语法" class="headerlink" title="一，语法"></a>一，语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj, prop, desc)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>obj</td><td>需要定义属性的当前对象</td></tr><tr><td>prop</td><td>当前需要定义的属性名</td></tr><tr><td>desc</td><td>属性描述符</td></tr></tbody></table><h3 id="二，示例"><a href="#二，示例" class="headerlink" title="二，示例"></a>二，示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">Object.defineProperty(obj, &#39;a&#39;, &#123;</span><br><span class="line">value : 20,</span><br><span class="line">writable : true,</span><br><span class="line">enumerable : true,</span><br><span class="line">configurable : true,</span><br><span class="line">get() &#123;&#125;,</span><br><span class="line">set() &#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj.a);  &#x2F;&#x2F; 20</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>属性的初始化值</td></tr><tr><td>writeble</td><td>是否可修改值的内容</td></tr><tr><td>enumerable</td><td>是否可枚举，默认为false</td></tr><tr><td>configurable</td><td>是否可删除，默认为false</td></tr><tr><td>get</td><td>在读取属性时调用的函数，默认值为undefined</td></tr><tr><td>set</td><td>在写入属性时调用的函数，默认值为undefined</td></tr></tbody></table><h3 id="三，writeble-属性"><a href="#三，writeble-属性" class="headerlink" title="三，writeble 属性"></a>三，writeble 属性</h3><blockquote><p>当writable属性设置为false时，该属性被称为“不可写”。它不能被重新分配。</p></blockquote><p>默认为 <code>false</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">obj.a &#x3D; 10;</span><br><span class="line">console.log(obj.a); &#x2F;&#x2F; 10</span><br><span class="line">Object.defineProperty(obj, &#39;b&#39;, &#123;&#125;);</span><br><span class="line">console.log(obj.b); &#x2F;&#x2F; undefined</span><br><span class="line">obj.b &#x3D; 20</span><br><span class="line">console.log(obj.b) &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><p>设置为 <code>true</code>，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">obj.a &#x3D; 10;</span><br><span class="line">console.log(obj.a) &#x2F;&#x2F; 10</span><br><span class="line">Object.defineProperty(obj, &#39;b&#39;, &#123; writable: true &#125;);</span><br><span class="line">console.log(obj.b) &#x2F;&#x2F; undefined</span><br><span class="line">obj.b &#x3D; 20</span><br><span class="line">console.log(obj.b) &#x2F;&#x2F; 20</span><br></pre></td></tr></table></figure><h3 id="四，enumerable-属性"><a href="#四，enumerable-属性" class="headerlink" title="四，enumerable 属性"></a>四，enumerable 属性</h3><p>默认为 <code>false</code></p><blockquote><p>enumerable 定义了对象的属性是否可以在 for…in 循环和 Object.keys() 中被枚举。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">Object.defineProperty(obj, &#39;a&#39;, &#123; enumerable: false &#125;);</span><br><span class="line">Object.defineProperty(obj, &#39;b&#39;, &#123; enumerable: true &#125;);</span><br><span class="line">Object.defineProperty(obj, &#39;c&#39;, &#123;&#125;);</span><br><span class="line">obj.d &#x3D; null;  &#x2F;&#x2F; 直接赋值时, enumerable 为 true</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ------ for...in ------</span><br><span class="line">let arr &#x3D; [];</span><br><span class="line">for (let i in obj) &#123;</span><br><span class="line">arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line">console.log(arr);  &#x2F;&#x2F; [&quot;b&quot;, &quot;d&quot;]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ------ Object.keys() ------</span><br><span class="line">let keys &#x3D; Object.keys(obj);</span><br><span class="line">console.log(keys);  &#x2F;&#x2F; [&quot;b&quot;, &quot;d&quot;]</span><br></pre></td></tr></table></figure><h3 id="五，configurable-属性"><a href="#五，configurable-属性" class="headerlink" title="五，configurable 属性"></a>五，configurable 属性</h3><blockquote><p>configurable 特性表示对象的属性是否可以被删除，以及除value和writable特性外的其他特性是否可以被修改。</p></blockquote><p>默认为 <code>false</code>，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">Object.defineProperty(obj, &#39;a&#39;, &#123;</span><br><span class="line">configurable: false,</span><br><span class="line">get() &#123;</span><br><span class="line">return 123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj.a);  &#x2F;&#x2F; 123</span><br><span class="line">delete obj.a;</span><br><span class="line">console.log(obj.a);  &#x2F;&#x2F; 123</span><br></pre></td></tr></table></figure><p>设置为 <code>true</code>，如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">Object.defineProperty(obj, &#39;a&#39;, &#123;</span><br><span class="line">configurable: true,</span><br><span class="line">get() &#123;</span><br><span class="line">return 123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(obj.a);  &#x2F;&#x2F; 123</span><br><span class="line">delete obj.a;</span><br><span class="line">console.log(obj.a);  &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><h3 id="六，一般的-Setters-和-Getters"><a href="#六，一般的-Setters-和-Getters" class="headerlink" title="六，一般的 Setters 和 Getters"></a>六，一般的 Setters 和 Getters</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function fn (args) &#123;</span><br><span class="line">Object.defineProperty(this, &#39;myproperty&#39;, &#123;</span><br><span class="line">get() &#123;</span><br><span class="line">return args;</span><br><span class="line">&#125;,</span><br><span class="line">set(res) &#123;</span><br><span class="line">this.val &#x3D; res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let _fn &#x3D; new fn(&#39;get&#39;);</span><br><span class="line">let myproperty &#x3D; _fn.myproperty;</span><br><span class="line">console.log(myproperty);  &#x2F;&#x2F; get</span><br><span class="line">_fn.myproperty &#x3D; &#39;set&#39;;</span><br><span class="line">let val &#x3D; _fn.val;</span><br><span class="line">console.log(val);  &#x2F;&#x2F; set</span><br></pre></td></tr></table></figure><h3 id="七，添加多个属性和默认值"><a href="#七，添加多个属性和默认值" class="headerlink" title="七，添加多个属性和默认值"></a>七，添加多个属性和默认值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">obj.a &#x3D; 1;</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">Object.defineProperty(obj, &#39;a&#39;, &#123;</span><br><span class="line">value: 1,</span><br><span class="line">writable: true,</span><br><span class="line">enumerable: true,</span><br><span class="line">configurable: true</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj, &#39;b&#39;, &#123; value: 2 &#125;);</span><br><span class="line">&#x2F;&#x2F; 等同于</span><br><span class="line">Object.defineProperty(obj, &#39;a&#39;, &#123;</span><br><span class="line">value: 1,</span><br><span class="line">writable: false,</span><br><span class="line">enumerable: false,</span><br><span class="line">configurable: false</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
